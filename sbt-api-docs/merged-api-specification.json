{
  "openapi": "3.1.0",
  "info": {
    "title": "FinText™ Platform: API Documentation",
    "version": "",
    "description": "Welcome to Solutions By Text's online documentation for our FinText (2.0) platform Our documentation is written for both developers and business users. We use the industry standard Redoc platform for our documentation.\n\n**Select a topic from the menu on the left to begin.**",
    "x-logo": {
      "url": "images/solutionsbytext.png"
    }
  },
  "tags": [
    {
      "name": "Basic SBT API Workflow",
      "description": "**A quick guide to using SBT APIs**\n\n![Basic API Flow](images/workflow-diagram-06022025-KSK.png)\n\nFollowing the procedure below ensures a correct API implementation which avoids the most common problems, pitfalls, gotchas, and prevents future issues.\n\n*Follow this procedure for every phone number, every time.*\n\n**1. Get a Token**\n\nTokens are good for one hour. Cache the token and use it for all API requests until it expires. SBT does not support refresh tokens.\n\nOptions for handling token expiry:\n* Time-Based: Request a new token before the current token expires. Example: Every 55 minutes.\n* Event-Based: Write code which handles 401 Unauthorized errors by requesting a new token.\n\n**2. Get Subscriber Status**\n\nCall this API *first*, every time. Based on the status received, do the following:\n* Active: Send messages to this number.\n* Inactive: Do not send messages to this number.\n* UnderVerification: Do nothing until the subscriber must respond with a keyword or correct PIN. The subscriber has been sent that information but has not yet responded.\n* Not a Subscriber: Go to Number 3 below.\n\n**3. Get Phone Numbers Data**\n\nThis API determines if a number is a mobile or a landline.\n\nIf the data.type is Mobile, do the following:\n* Use the Add Subscriber to a Group or Add Subscriber to a Brand APIs to opt in the subscriber. \n* Note: Add Subscriber to a Group opts in the subscriber to Marketing or Non-Marketing messages. Use Add Subscriber to a Brand to opt in a subscriber to both Marketing and Non-Marketing messages.\n\nIf the data.type is *not* Mobile, the number is a Landline.\n* *Do not* attempt to add this number. The attempt will fail.\n* *Do not* attempt to message the number. Messaging will result in a StopFail and may cost a usage credit.\n* *Update* any records to show that the number is not Mobile and not eligible for messaging.\n\n**Five Important Takeaways**\n* Fetch a token when needed and use it for one hour.\n* Use Get Subscriber Status for every number, every time.\n* Get Phone Numbers Data is only required once per number.\n* Do not use the Add Subscriber APIs with non-mobile numbers.\n* Do not use the Add Subscriber APIs before attempting to send messages."
    },
    {
      "name": "Endpoint URLs",
      "description": "Purpose | URL\n-|-\nStaging and Integration | https://t2c-api-stage.solutionsbytext.com \nProduction | https://t2c-api.solutionsbytext.com"
    },
    {
      "name": "Authentication",
      "description": "The Solutions By Text 2.0 platform uses the industry-standard OAuth 2.0 authentication protocol. The protocol flow, with specifics for the SBT process:\n\n![Authentication Flow](images/OAuth-01.png)\n\nMore details:\n1. The Authorization Request is an implicit part of the account setup process with SBT.\n2. In the Authorization Grant, SBT’s Client Services team creates a set of credentials. These credentials are a Client ID and Client Secret, which the Client uses for the next step. The Client ID and Client Secret are much like a username and password.\n3. The Client authenticates with the Authorization Server using the Client ID and Client Secret provided by SBT.\n4. The Authorization Server authenticates the Client, validates the Client ID and Client Secret, and issues an Access Token.\n5. The Client requests access to the Resource Server by presenting the Access Token.\n6. The Resource Server validates the Access Token and serves the Client’s request.\n\n**Token URLs**\n\nPurpose | URL\n-|-\nStaging and Integration | https://login-stage.solutionsbytext.com/connect/token \nProduction | https://login.solutionsbytext.com/connect/token\n\nJSON response:\n\n```\naccess_token: string,\nexpires_in: string,\ntoken_type: Bearer,\nscope: array\n```\n\nName | Type | Description\n-|-|-\naccess_token | String | The token string; it has no defined maximum length.\nexpires_in | Integer | Time in seconds to expiration of the access token.\ntoken_type | String | Bearer\nscope | Array of strings | Space-delimited strings, represents the operations allowed by the access_token.\n\n**IMPORTANT**\n* Access Tokens expire after one hour (3,600 seconds).\n* SBT does not support refresh tokens.\n\n**Token Management Best Practices**\n* Generate an access token once an hour per API key; that is SBT's preferred practice.\n* *Do not generate a new token for each API request.* Doing so causes unnecessary work for customer organizations, places stress on the authentication server, and is not scalable.\n* When tokens expire, simply fetch a new token.\n* SBT recommends a persistent token cache, especially for customers using multiple services (example: Lambda/serverless functions).\n* The API client should be tolerant of token expiry during execution. The client should be able to fetch a new token and continue execution without failure.\n* Multiple tokens may be generated in an hour, up to a reasonable limit (5 to 10 per hour) if the customer’s architecture genuinely requires it.\n\nFull technical information on OAuth 2.0 can be found at the following sites:\n* [Internet Engineering Task Force (IETF) OAuth 2.0 Authorization Framework Memo]( https://datatracker.ietf.org/doc/html/rfc6749)\n* [Aaron Parecki’s OAuth 2.0 Nuts and Bolts](https://oauth.net/2/)"
    },
    {
      "name": "Important Technical Notes",
      "description": "**Universally Unique Identifiers**\n\nA Universally Unique Identifier (UUID) is a 128-bit label used to uniquely identify objects in computer systems. UUIDs are standardized by the Open Software Foundation (OSF) as part of the Distributed Computing Environment (DCE). Many objects in the SBT platform follow the UUID format.\n\nSBT UUIDs follow the standard 8-4-4-4-12 format. Example: 44463f49-ad32-460d-956c-83849fc639a5\n\nCustomers must ensure that their systems can accept UUIDs in the format shown above.\n\nMore information on UUIDs is available here: https://commons.apache.org/sandbox/commons-id/uuid.html\n\n**Query Formatting**\n\nSBT uses standard REST API URIs. See the Endpoint URLs shown above.\n\nGeneral format: {Production or Staging Endpoint}/{API Path}&{variable=value}&{variable=value}. Include as many &{variable=value} appendices as necessary up to the API's maximum.\n\n*Examples*\n\nGet Phone Numbers Data: /phonenumbers-data\n\n{Production or Staging Endpoint}/phonenumbers-data&msisdn=12345678910&msisdn=13456789123\n\nGet Subscriber Status: /groups/subscribers/status\n\n{Production or Staging Endpoint}/groups/f0618891-6561-43fb-ae67-c84f5448cea7/subscribers/status&msisdn=12345678910\n&msisdn=13456789123&msisdn=14567891234&msisdn=15678912345&msisdn=16789123456\n\nMore examples will be added as this document evolves.**Date Formatting**\n\nDatetime objects from SBT servers are in ISO 8601 format (2025-03-07T18:51:29.9451124Z).\n\nIf the last character is *Z* for *Zulu*, that indicates UTC. Otherwise, as in the UI, times are given in whichever time zone is set for your computer."
    },
    {
      "name": "Legacy (1.0) to FinText (2.0) Equivalencies",
      "description": "For clients using the SBT Legacy platform, the table below shows the equivalent API calls between the Legacy and FinText platforms. Note that some functions spanning multiple 1.0 APIs has been combined into single 2.0 APIs.\n\n1.0 Name | 2.0 Name\n-|-\n[Authenticate API Key]( https://solutionsbytext.com/api-documentation/authenticate-api-key/) | [Authentication OAuth 2.0 Bearer Token]( https://developers.solutionsbytext.com/docs/t2c2.0/index.html#tag/Authentication) \n[Get Subscriber Status]( https://solutionsbytext.com/api-documentation/get-subscribers-status/) | [Get Subscriber Status]( #tag/Subscription/paths/~1groups~1{groupId}~1subscribers~1status/get) \n[Get Carrier Lookup]( https://solutionsbytext.com/api-documentation/get-carrier-lookup/) | [Get Phone Numbers Data]( #tag/PhoneNumbers/paths/~1phonenumbers-data/get) \n[Request VBT]( https://solutionsbytext.com/api-documentation/request-vbt/) | [Add Subscriber to a Group]( #tag/Subscription/paths/~1groups~1{groupId}~1subscribers/post) \n[Require VBT]( https://solutionsbytext.com/api-documentation/require-vbt/) | [Add Subscriber to a Group]( #tag/Subscription/paths/~1groups~1{groupId}~1subscribers/post) \n[Confirm VBT]( https://solutionsbytext.com/api-documentation/confirm-vbt/) | [Confirm Subscriber with PIN]( #tag/Subscription/paths/~1groups~1%7BgroupId%7D~1subscribers~1%7Bmsisdn%7D~1verification/post) \n[Send Message]( https://solutionsbytext.com/api-documentation/send-message/) | [Send Message to Subscribers]( #tag/Message/paths/~1groups~1%7BgroupId%7D~1messages/post) \n[Send Template Message]( https://solutionsbytext.com/api-documentation/send-template-message/) | [Send Template Message to Subscribers]( #tag/Message/paths/~1groups~1%7BgroupId%7D~1template-messages/post) \n[Update Subscriber]( https://solutionsbytext.com/api-documentation/update-subscriber/) | [Update Subscriber Data in a Brand]( #tag/Subscription/paths/~1v2~1groups~1%7BgroupId%7D~1subscribers/put) \n[Get Deactivation Numbers]( https://solutionsbytext.com/api-documentation/get-deactivation-numbers/) | [Get All Deactivation Events for an Account]( #tag/Report/paths/~1accounts~1deactevents/get) \n[Get ShortURL]( https://solutionsbytext.com/api-documentation/get-short-url/) | [Add SmartURL to Group]( #tag/SmartClick/paths/~1groups~1%7BgroupId%7D~1shortUrls/post) \n[Get ShortURL Report]( https://solutionsbytext.com/api-documentation/getshorturl-report/) | [Get All SmartURLs]( #tag/Report/paths/~1groups~1%7BgroupId%7D~1shorturls/get) \n[Get ShortURL Details]( https://solutionsbytext.com/api-documentation/get-short-url-details/) | [Get All SmartURLs]( #tag/Report/paths/~1groups~1%7BgroupId%7D~1shorturls/get) \n[Messages Sent]( https://solutionsbytext.com/api-documentation/messages-sent/) | [Get Sent Message Details]( #tag/Report/paths/~1groups~1%7BgroupId%7D~1outbound-messages/get) \n[Messages Sent By Type]( https://solutionsbytext.com/api-documentation/messages-sent-by-type/) | [Get Sent Message Details]( #tag/Report/paths/~1groups~1%7BgroupId%7D~1outbound-messages/get) \n[Inbound Messages]( https://solutionsbytext.com/api-documentation/inbound-messages/) | [Get Inbound Message Details]( #tag/Report/paths/~1groups~1%7BgroupId%7D~1inbound-messages/get) \n[Inbound Messages By Type]( https://solutionsbytext.com/api-documentation/inbound-messages-by-type/) | [Get Inbound Message Details]( #tag/Report/paths/~1groups~1%7BgroupId%7D~1inbound-messages/get) \n[UnSubscribe]( https://solutionsbytext.com/api-documentation/unsubscribe/) | [Delete Subscriber]( #tag/Subscription/paths/~1groups~1%7BgroupId%7D~1subscribers~1%7Bmsisdn%7D/delete) \n[Subscribers Report]( https://solutionsbytext.com/api-documentation/subscribers/) | [Get All Subscribers In a Group](#tag/Report/paths/~1groups~1%7BgroupId%7D~1subscribers?pageNumber=%7BpageNumber%7D&pageSize=%7BpageSize%7D/get) \n[Get Message Status]( https://solutionsbytext.com/api-documentation/get-message-status/) | [Get Sent Message Details]( #tag/Report/paths/~1groups~1%7BgroupId%7D~1outbound-messages/get) \n[MMS Retrieve]( https://solutionsbytext.com/api-documentation/mms-retrieve/) | [MMS Retrieve]( #tag/Message/paths/~1groups~1%7BgroupId%7D~1media-messages~1%7BmessageId%7D~1file~1%7BfileId%7D/get) \n[MMS Delete]( https://solutionsbytext.com/api-documentation/mms-delete/) | [MMS Delete]( #tag/Message/paths/~1groups~1%7BgroupId%7D~1media-messages~1%7BmessageId%7D~1file~1%7BfileId%7D/delete)"
    },
    {
      "name": "Other Resources",
      "description": "**HubSpot Resources**\n\n*You must be a registered SBT HubSpot user to view these pages*.\n* [**Glossary:**](https://go.solutionsbytext.com/knowledge/glossary-of-terms) An extensive list of terms separated by topic.\n* [**Knowledge Base:**](https://go.solutionsbytext.com/knowledge) The Knowledge Base has articles on our User Interface (UI) and File Processing Automation (FPA) options.\n\n**Other Redocly Documentation**\n* [**SBT Payments Platform:**](https://developers-staging.solutionsbytext.com/docs/payments/index.html) API documentation for the SBT Payments platform; for clients of both our FinText and Legacy platforms.\n* [**SBT TextIQ:**](https://developers.solutionsbytext.com/docs/textiq/api/v1/index.html) Our TextIQ API documentation, for Legacy 1.0 customers."
    },
    {
      "name": "Subscription",
      "description": "**APIs that provide information and allow operations on phone numbers and subscribers.**",
      "x-displayName": "APIs: Subscriptions"
    },
    {
      "name": "Message",
      "description": "**APIs that send messages to Subscribers and which perform other message-related actions.**\n\n**Important:** Please read and follow the the usage limits prescribed below for the Send Message APIs.",
      "x-displayName": "APIs: Messages"
    },
    {
      "name": "PhoneNumbers",
      "description": "**An API that performs carrier lookups.**",
      "x-displayName": "APIs: Phone Numbers"
    },
    {
      "name": "SmartClick",
      "description": "**These APIs create shortened URLs with extended features.**",
      "x-displayName": "APIs: SmartURL"
    },
    {
      "name": "Keyword",
      "description": "**An API that creates keywords within Groups.**",
      "x-displayName": "APIs: Keywords"
    },
    {
      "name": "Report",
      "description": "**APIs that provide maintenance and analysis reports.**\n\nReports may be generated for Accounts, Groups, messaging, and other platform features. Some APIs have extended descriptions for their functions; see below for more information.\n\n**Reporting Delays**\n\nPlease be aware of the following delays in reporting:\n* During non-peak hours, expect a delay of at most one minute. Data from that one minute will not be included in the reports.\n* During peak hours, that delay can reach up to 10 to 15 minutes. Report data in that window may not be included in the report.\n* Data which has not synchronized from the transactional database will not be available until the synchronization process is complete.",
      "x-displayName": "APIs: Reports"
    },
    {
      "name": "Template",
      "description": "**These APIs perform operations on message templates within a group.**",
      "x-displayName": "APIs: Templates"
    },
    {
      "name": "Webhook",
      "description": "Webhooks are automated processes which allow Clients to receive data for asynchronous events without constant monitoring for those events.\n\nWebhooks send a JSON payload to a target URL specified by the Client. The Client’s target URL is set up by the Client and given to SBT. SBT then sets the target URL as the destination for the webhook data. Clients decide how to use the JSON data; their developers may use it to automate processes, send alerts on errors, send automated emails, and so on.\n\nError messages for SBT webhooks are sent from the Client to SBT. They confirm that the webhook payload was received, or that an error was encountered.\n\n**Webhook IP Whitelisting**\n* Production/Live: 3.208.218.10, 44.197.56.28, 34.200.67.47\n* Staging/Testing: 34.239.213.6, 18.211.67.242\n\n**Best Practices**\n\nAvoid operations with heavy logic, like database operations, when receiving the webhook callback.\n\nSuccessful webhook implementations must be optimized for latency using asynchronous processes. The following sequence illustrates the concept:\n1.  Immediately accept webhook payloads from SBT.\n2.  Put webhook payloads into a queue. SBT recommends a persistent queue.\n3.  Respond back to SBT with a 2xx/Success status message as soon as possible.\n4.  Validate or process the webhook data. Examples: Inspect the JSON, write to a file or database.\n\n**Webhook Notification Precedence**\n\nThe SBT FinText Platform prioritizes webhooks notifications based on their organization level:\n1. Group\n2. Brand\n3. Account\n\n Notifications from Group webhooks take precedence over Brand webhook notification, and Account notifications have the lowest precedence. Please remember to account for this order when evaluating data from webhooks.\n\n**Webhook Blacklisting**\n\nTarget URLs for webhook payloads are set up by the client. If a target URL returns an error message to SBT indicating that a webhook payload failed, the following process occurs:\n1. The webhook sends two more payloads to the client’s target URL.\n2. After three failures—the initial failure and two more failed payload attempts—the target URL is suspended. Note: Webhook payloads will continue to be generated by SBT. The payloads will be queued by SBT for sending when the target URL is functioning properly.\n3. Suspended URLs are sent three payloads every thirty minutes. These payload attempts continue for a maximum of 100 hours (200 three-payload attempts, one three-payload attempt every 30 minutes).\n4. After 200 failed three-payload attempts, the target URL is deactivated in the SBT system. The client must ensure that the target URL is functional and contact SBT to have it reactivated.\n\nIf the target URL successfully receives payloads during the second or third attempts described in Step 2 above, then SBT will retry all payloads which queued during the failures, including those from previous days.\n\n*Important Notes*\n* Clients have the responsibility to ensure that their target URLs are functioning properly.\n* Only the webhook payloads from SBT to the client are affected in the process outlined above. \n* Messages will continue to be sent from the client to subscribers, even if the target URL is deactivated.\n* Once a target URL is reactivated , all queued payloads are deleted from the SBT system.\n\n![Org Structure](images/webhook-flow-4.png)",
      "x-displayName": "APIs: Webhooks"
    },
    {
      "name": "Status Codes",
      "description": "Status Codes and ActionsSome status codes have extended descriptions with information on why a code is sent and the actions clients should take. Please see our [KB article on Extended Status Code Descriptions]( https://go.solutionsbytext.com/knowledge/extended-status-codes). That article is also linked in the relevant status codes below: 99, 101, 102, and 200.\n\nStatus Code | API Description | UI Description | SBT Automatic Actions | Client Actions \n-|-|-|-|- \n-1 | Unknown Carrier | Message Queued | None | None \n99 | Your message has been queued in the Platform | Message Queued | None | None; [click here for more detail]( https://go.solutionsbytext.com/knowledge/extended-status-codes). \n100 | Message was successfully delivered | Delivered | None | None \n101 | Message was successfully delivered to the carrier | Sent to carrier | None | None; [click here for more detail]( https://go.solutionsbytext.com/knowledge/extended-status-codes). \n102 | The message has been queued for delivery to the carrier | Queued to carrier | None | None; [click here for more detail]( https://go.solutionsbytext.com/knowledge/extended-status-codes). \n110 | Stopfail - Not a Subscriber | Stopfail - Not a Subscriber | None | This phone number has never been opted in. To send them text messages, the phone number will need to go through the opt-in process. \n111 | Stopfail - Inactive Subscriber | Stopfail - Inactive Subscriber | Phone number unsubscribed by SBT. | This phone number has been unsubscribed on the SBT platform using one of the opt-out methods. Unsubscribe the number on your platform and on the SBT platform. \n112 | Stopfail - Blocked Subscriber | Stopfail - Blocked Subscriber | None | A phone number SBT has blocked from the platform. Unsubscribe the number on your platform and on the SBT platform. \n113 | StopFail - Carrier Not Supported | StopFail - Carrier Not Supported | This will roll to DualDelivery™ on a Long Code (Only applicable for accounts with DSC and 10DLC). | None \n114 | StopFail - Invalid Number | StopFail - Invalid Number | None | Unsubscribe the number on your platform and on the SBT platform. \n115 | StopFail - Landline Number | StopFail - Landline Number | None | Unsubscribe the number on your platform and on the SBT platform. \n116 | StopFail - VBT In Process | StopFail - VBT In Process | None | If using the PIN or Reply Yes opt-in method, these are numbers which have not completed the opt-in process. The customer must provide the PIN or reply YES. \n120 | StopFail – Non-FTEU Carrier | StopFail – Non-FTEU Carrier | None | Unsubscribe the number on your platform and on the SBT platform. \n200 | The message was undeliverable and no explanation was provided from the carrier | Undeliverable | None | Retry; After 3 fails, unsubscribe the number on your platform and on the SBT platform. [Click here for more detail](  https://go.solutionsbytext.com/knowledge/extended-status-codes). \n201 | The carrier has blocked SMS traffic to the handset | Blocked Number | This will roll to DualDelivery™ on a Long Code (only applicable for accounts with DSC and 10DLC). | None \n203 | The phone number is no longer in service | Deactivated Number | SBT will unsubscribe the phone number from the platform the following day during the nightly deactivations. | Unsubscribe the number on your platform and also on the SBT platform. \n204 | No message content provided, message was too long, or message contained invalid characters | Invalid content | None | Follow up with SBT Client Consultant to reevaluate message template. \n205 | The phone number belongs to a country that is not supported | Unsupported Country | None | Unsubscribe the number on your platform and also on the SBT platform. \n206 | The carrier was unable to forward the message to the handset | Unable to forward | This will roll to DualDelivery on a Long Code (Only applicable for accounts with DSC and 10DLC) | None \n208 | The carrier ID provided was invalid | Invalid carrier | Customer has changed carriers; SBT will deliver on new carrier. | Please retry; After 3 fails, unsubscribe the number on your platform and on the SBT platform. \n209 | Carrier Not Found | Carrier Not Found | None | Unsubscribe the number on your platform and on the SBT platform. \n210 | Subscriber insufficient credits | Subscriber insufficient credits | None | The subscriber—the end user/consumer—must buy more service credits from their carrier. \n211 | Invalid destination address | Invalid destination address | None | Retry. After 3 failed attempts, unsubscribe the number on your platform and the SBT platform. [Click here for more detail](  https://go.solutionsbytext.com/knowledge/extended-status-codes) \n212 | Message content blocked | Block - Review | None | Do not reattempt. Follow up with SBT support. \n213 | Message blocked, unsubscribe | Block - Unsubscribe | None | Retry. Do not reattempt. Unsubscribe. \n214 | Blocked due multiple identical or similar messages within an hour to the same subscriber | Flood Filter | None | Retry submit after 24 hours. \n404 | System Error | Temporary system error by carrier | None | Retry submit after 24 hours. \n408 | A provided parameter was invalid | Invalid parameter | None | Follow up with SBT Technical Support. \n409 | Account misconfiguration detected | Config error | None | Follow up with your SBT Customer Success Manager to check org codes. \n410 | Carrier not supported by aggregator / No delivery route defined for carrier | Invalid route | None | Unsubscribe the number on your platform and on the SBT platform. \n411 | Carrier TPS Rate Exceeded | Carrier TPS Rate Exceeded | None | Retry campaign. \n412 | Carrier Daily Volume Exceeded | Carrier Daily Volume Exceeded | None | Retry campaign after 24 hours. \n572 | Campaign information is not provisioned for this carrier or is not active | Campaign not provisioned | This will roll to DualDelivery™ on a Long Code (Only applicable for accounts with DSC and 10DLC) | None \n800 | Message undeliverable due to restriction in communication code used | LC_Replaced | None | Follow up with SBT Technical Support."
    },
    {
      "name": "Error Codes",
      "description": "The APIs use standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:\n\nApp Code  | Description\n-|-\n-1| Downstream server error\nbrd.1001 | BrandId is required \nbrd.1002 | Invalid BrandId \nbrd.1003 | Consent category is not associated to brand \nbrd.1005 | Brand level optin is not enabled for this brand. Please contact the support team. \nbrd.1006 | Brand configured incorrectly \ndea.1001 | To Date must be greater than From Date \ndea.1002 | Current Date must be greater than To Date \ndea.1003 | Invalid Event Type \ndea.1004 | Unsupported CountryCode \ndea.1005 | Event type required \ngen.1200 | Request successful \ngen.1401 | Unauthorized \ngen.1403 | Access forbidden \ngen.1404 | Resource not found \ngen.1412 | Precondition Failed \ngen.1500 | Internal Error \ngrp.1001 | GroupId is required \ngrp.1002 | Invalid GroupId \ngrp.1003 | Consent category is not associated to group \ngrp.1004 | Group creation is not proper \nkwd.1005 | Keyword is required \nkwd.1011 | Keyword is not available \nmsg.1030 | Message is required \nmsg.1032 | Please enter from field. \nmsg.1033 | Message type is invalid. \nmsg.1035 | Scheduled time should be greater than 15 minutes from current time \nmsg.1042 | Message ID is required \nmsg.1043 | File id is required \nmsg.1044 | File not found \nmsg.1046 | Content type is not supported \nmsg.1047 | Content Size is greater than maximum allowed size \nmsg.1049 | Malformed content received in Base 64 format. Unable to decode. \nmsg.1051 | File extension not supported \nmsg.1052 | Timeout when accessing URL \nmsg.1052 | Timeout when accessing URL. Status code = {{status code}} \nmsg.1053 | Error encountered when accessing URL \nmsg.1053 | Error encountered when accessing URL. Status code = {{status code}} \nmsg.1055 | MMS messages can be sent to a maximum of 100 subscribers \nmsg.1056 | Broadcast message does not support MMS \nmsg.1059 | Scheduled time should be within 7 days of current time \nmsg.1061 | TemplateName does not exist in the group \nmsg.1064 | Invalid scheduledatetime. The value cannot be null, empty, or default. \nphn.1001 | Phone number required \nphn.1002 | Phone number more than 10 characters \nrpt.1001 | From Date cannot be greater than To Date \nrpt.1002 | Report maximum is 60 days \nrpt.1003 | Report maximum is 60 days \nslk.1001| Long URL is required \nslk.1002| ShortURL setting should be enabled \nslk.1006| Short URL is required \nslk.1007| Only HTTPS URLs are supported in the long url field \nslk.1009| Custom short url not found \nslk.1010| Invalid URI \nslk.1011| Custom URL suffix length must be greater than 2 characters and less than 10 characters \nslk.1012| Only alphanumeric characters, hyphen ('-') and underscore ('_')  are allowed in custom URL suffix \nslk.1016 | To Date must be greater than From Date \nsub.1013 | Mobile number is invalid \nsub.1019 | Subscriber exist \nsub.1139 | Mobile numbers are required \nsub.1140 | Maximum of 50 mobile numbers are allowed \nsub.1142 | Invalid or expired pin \nsub.1143 | Verification type is not allowed. \nsub.1144 | Mobile number is required \nsub.1145 | PIN is required \nsub.1146 | Subscriber not found \nsub.1147 | To Date must be greater than From Date \nsub.1148 | Customparams name should be mandatory. \nsub.1149 | Properties name should be mandatory. \ntml.1036 | TemplateId is required \ntml.1037 | TemplateId does not exist in the group "
    }
  ],
  "paths": {
    "/groups/{groupId}/subscribers/status": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get Subscriber Status",
        "description": "**Description:** Checks if a phone number is in a group or specific consent category. It allows clients to determine if a subscriber has opted in to receive Marketing or Non-Marketing messages. It can be used to check for the user’s status for a group within a brand.\n\n**Use Case:** Used when the client needs to determine if a user has opted in to receive messages, or to check the consent categories the user has opted into.\n\n**Usage Limits:** This call can check up to 50 numbers in a batch.\n\n**Query Format:** Add each phone number/MSISDN to the endpoint URL. Example:\n\n{Production or Staging Endpoint}/groups/{groupId}/subscribers/status?msisdn=12345678910\n&msisdn=13456789123&msisdn=14567891234&msisdn=15678912345&msisdn=16789123456",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group of which the subscriber is a member.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msisdn",
            "in": "query",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Message\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberStatusExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Message\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nsub.1139| Mobile numbers are required\nsub.1140| Maximum of 50 mobile numbers are allowed\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Message\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Message\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/subscribers": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Add Subscriber to a Group",
        "description": "**Description:** Adds a Subscriber to a messaging group. It adds one Subscriber per call; each Subscriber to be added requires a separate API call. It also initiates the process to obtain the opt-in consent as specified during the API call.\n\nConsent may be determined/specified by one of the following means:\n* A keyword response by a subscriber. The subscriber replies with a keyword selected by the client. The keyword can be as simple as YES.\n* A one-time PIN. The subscriber replies with a PIN code sent by the client, which can be entered by the subscriber into a web form or read to an agent. See Confirm Subscriber with PIN for the corresponding API call to confirm the PIN.\n* Opt-In. The subscriber is notified that they have been added to a group with the option to opt out by a replying with a STOP keyword.\n* Silent Opt-In. The subscriber is added to a group without any notification. However, the user is free to opt-out by replying with a STOP keyword.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group to which the subscriber is being added.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "x-summary": "Created",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberStatusResponseExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Message\n----------------|---------\ngrp.1001 | GroupId is required\ngrp.1002 | Invalid GroupId\nsub.1013 | Mobile number is invalid\nsub.1143 | Verification type is not allowed\nsub.1144 | Mobile number is required\nsub.1148 | *customParams* name is mandatory\nmsg.1048 | Content URL is not accessible\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\ngrp.1403 | Access denied for On Demand Messaging Group\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "409": {
            "x-summary": "Conflict",
            "description": "App Code  | Description\n----------------|---------\nsub.1019 | Subscriber exists\nsub.1021 | msisdn already under verification\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "428": {
            "x-summary": "Precondition Required",
            "description": "App Code  | Description\n----------------|---------\nsub.1019 | Subscriber exists\nsub.1021 | msisdn already under verification\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/subscribers/{msisdn}/verification": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Confirm Group Subscriber with PIN",
        "description": "**Description:** The second half of the Add Subscriber workflow; it is implemented when a client is using a one-time PIN for opt-in consent from the user. The PIN can be entered by client personnel when read back by the customer during a voice call. The Client may also implement a web interface for the Subscriber to enter the PIN themselves.\n\n**Use Case:** Used if the client or their subscribers want an extra layer of security for the opt-in consent process.\n\n*Example:* A company modifies its enrollment process for new customers. They include a phone number field on their online portal’s enrollment form which allows new customers to enter a cell phone number. The portal then makes an Add Subscriber request with the PIN opt-in method, and the portal platform sends a PIN to the new customer.\n\nThe new customer enters the PIN back into the web portal. There are two possible outcomes:\n1. If the PIN entered by the new customer does not match the PIN generated in response to the Add Subscriber call, the portal should display an error and ask the customer to re-enter the PIN.\n2. If the PIN entered by the new customer matches the PIN generated in response to the Add Subscriber call, the portal should invoke the Confirm Subscriber with PIN API call to complete adding the new customer as a subscriber to the T2C platform. The T2C platform will then send an opt-in confirmation message to the subscriber.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group to which the subscriber will be added.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msisdn",
            "in": "path",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmVbtMessageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmVbtMessageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmVbtMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberStatusVerificationResponseExternalApiResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nsub.1013| Mobile number is invalid\nsub.1142| Invalid or expired pin\nsub.1144| Mobile number is required\nsub.1145| PIN is required\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "428": {
            "x-summary": "Precondition Required",
            "description": "App Code  | Description\n----------------|---------\ngrp.1004 | Group creation is not proper\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/subscribers?pageNumber={pageNumber}&pageSize={pageSize}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get All Subscribers In a Group",
        "description": "**Description:** Returns a list of subscribers in a group, including opt-in and opt-out status for each subscriber.\n\n**Use Case:** Clients can confirm existing subscriber numbers, or check for newly added subscriber numbers and compare with earlier lists—find the delta, in mathematical terms.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of the group being polled.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startsWith",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "description": "Start date of query. Default is first of the current month. Must include the *to* date (shown below) or omitted; an error will result otherwise.",
            "example": "2024-05-13T00:00:00Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "description": "End date of query. Default is the current date. Must include the *from* date (shown above) or omitted; an error will result otherwise.",
            "example": "2024-05-17T00:00:00Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Number of pages in the query return.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items on each returned page.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nsub.1147| Todate should be greater than fromdate\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse400ForGetAllSubcriberInGroup"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse403ForGetAllSubcriberInGroup"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse500ForGetAllSubcriberInGroup"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/subscribers/{msisdn}/reactivation-request": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Reactivate Subscriber",
        "description": "**Description:** This API returns an inactive subscriber to *active* status. It has two use cases:\n\n**Use Case 1:** Re-opts-in a subscriber who had been opted out and is currently inactive. VBT type usage is as follows:\n* PIN and Reserved VBT: Used when the subscriber originally opted out via reserved word.\n* VBT Auto: Used when the subscriber originally opted out via a carrier event or client opt-outs.\n\n**Use Case 2:** Prompt an unverified subscriber who is in *under verification* status with another PIN or Reserved Word so that they may act and become an active subscriber.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group to which the subscriber will be added.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msisdn",
            "in": "path",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReactivateSubscriber"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReactivateSubscriber"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReactivateSubscriber"
              }
            }
          }
        },
        "responses": {
          "201": {
            "x-summary": "Created",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberStatusResponseExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Message\n----------------|---------\ngrp.1001 | GroupId is required\ngrp.1002 | Invalid GroupId\nsub.1013 | Mobile number is invalid\nsub.1143 | Verification type is not allowed\nsub.1144 | Mobile number is required\nsub.1148 | *customParams* name is mandatory\nmsg.1048 | Content URL is not accessible\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\ngrp.1403 | Access denied for On Demand Messaging Group\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "409": {
            "x-summary": "Conflict",
            "description": "App Code  | Description\n----------------|---------\nsub.1019 | Subscriber exists\nsub.1021 | msisdn already under verification\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "428": {
            "x-summary": "Precondition Required",
            "description": "App Code  | Description\n----------------|---------\ngrp.1003 | Consent category is not associated to group\ngrp.1004 | Group creation is not proper\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/subscribers/{msisdn}/": {
      "delete": {
        "tags": [
          "Subscription"
        ],
        "summary": "Delete Subscriber",
        "description": "**Description:** Removes a subscriber from receiving messages from any specified groups to which they have been subscribed. Clients must specify the group from which to remove the subscriber, and may remove one subscriber per call to this API.\n\n**Use Case:** Delete Subscriber may be used to remove a single subscriber upon request or when removing accounts during a regular rotation. Typical instances include customers leaving the organization, closing accounts, completing obligations, or if the customer decides that they no longer want to receive text messages.\n\n*Example:* A customer of an insurance company decides against renewing their policy. When the policy lapses, the company must archive the customer record in its CRM. Also, the customer may no longer want to receive text messages from the company. The CRM would invoke the Unsubscribe/Opt-Out API call to remove the customer from any relevant T2C groups.\n\n**Usage Limits:** Clients may remove one subscriber per call using this API.\n\n**Inbound Message Status Webhook Stop:** When this API is called, SBT posts a stop to the *Inbound Message Status* webhook.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group from which the subscriber will be deleted.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msisdn",
            "in": "path",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nsub.1013| Mobile number is invalid\nsub.1144| Mobile number is required\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "404": {
            "x-summary": "Not Found",
            "description": "App Code  | Description\n----------------|---------\ngen.4404 | Resource Not Found\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/subscribers/{msisdn}/subscription-cancellation": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Delete Subscriber (v2)",
        "description": "**The previous version of this API will be deprecated; watch for an announcement from SBT for a date of effect.**\n\n**Description:** Removes a subscriber from receiving messages from any specified groups to which they have been subscribed. Clients must specify the group from which to remove the subscriber, and may remove one subscriber per call to this API.\n\n**Use Case:** Delete Subscriber may be used to remove a single subscriber upon request or when removing accounts during a regular rotation. Typical instances include customers leaving the organization, closing accounts, completing obligations, or if the customer decides that they no longer want to receive text messages.\n\n*Example:* A customer of an insurance company decides against renewing their policy. When the policy lapses, the company must archive the customer record in its CRM. Also, the customer may no longer want to receive text messages from the company. The CRM would invoke the Unsubscribe/Opt-Out API call to remove the customer from any relevant T2C groups.\n\n**Usage Limits:** Clients may remove one subscriber per call using this API.\n\n**Inbound Message Status Webhook Stop:** When this API is called, SBT posts a stop to the *Inbound Message Status* webhook.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group from which the subscriber will be deleted.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msisdn",
            "in": "path",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSubscriberSilent"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSubscriberSilent"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSubscriberSilent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nsub.1013| Mobile number is invalid\nsub.1144| Mobile number is required\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\ngrp.1403 | Access denied for On Demand Messaging Group\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "404": {
            "x-summary": "Not Found",
            "description": "App Code  | Description\n----------------|---------\ngen.4404 | Resource Not Found\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/deactevents": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get All Deactivation Events for an Account",
        "description": "**Description:** Retrieves all service changes to all mobile numbers subscribed to a client's account, including deactivations and and ported numbers.\n\n**Use Case:** This API allows clients to check if a number is still with the person who originally opted in for messaging. If the number has been re-used by a carrier, the returned data will show that result.",
        "parameters": [
          {
            "name": "EventDate",
            "in": "query",
            "description": "Date to be checked for events.",
            "example": "2024-05-17T00:00:00Z",
            "required": true,
            "schema": {
              "type": "date-time"
            }
          },
          {
            "name": "EventType",
            "in": "query",
            "description": "The event type can be *Deactivated* or *Ported*.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "CountryCode",
            "in": "query",
            "description": "Country Code is not required to retrieve deact events for US numbers. Currently, SBT only has deact data for US numbers.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Number of pages in the query return.",
            "example": 5,
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items on each returned page.",
            "example": 50,
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchSubscribersResponseListPagedResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ndea.1002| To Date cannot be greater than Current Date\ndea.1003| Invalid EventType\ndea.1004| Unsupported CountryCode\ndea.1005| Event type is required\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/shortUrls": {
      "post": {
        "tags": [
          "SmartClick"
        ],
        "summary": "Add SmartURL to Group",
        "description": "**Description:** Adds a shortened, character-saving URL for use within a specified group. The shortened URL uses SBT’s *s-url.pro* domain by default; a custom domain may also be used. Contact SBT for more information on custom domains.\n\nWhen the subscriber opens the SmartURL link within a message, the subscriber’s browser first opens the SmartURL on the SBT server and is then redirected to the long URL—the actual site address—provided by the client.\n\n**Use Case:** SmartURL provides clients with a short, branded, secure, and trackable link to send to subscribers. The shorter link allows the SMS message to be more detailed and customized for the subscriber. The branded link gives subscribers confidence that the link is legitimate and secure, improving click-through rates. The click-through rate is tracked by SBT, providing the client with data on the success of the message or campaign.\n\n*Example:* An SBT client organization has a page on their website for customers to e-sign confidential documents. The URL, including the https:// URI, is 40 characters long, which would use 25 percent of an SMS message. Using SmartURL would shorten the link in the SMS message to between 14–17 characters on average (including the https:// URI).",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group to which the SmartURL will be added.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShorturlRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShorturlRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShorturlRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSmartclickExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nslk.1001| Long URL is required\nslk.1002| ShortURL setting should be enabled\nslk.1007| Only HTTPS URLs are supported in the long url field\nslk.1011| Custom URL suffix length must be greater than 2 characters and less than 10 characters\nslk.1012| Only alphanumeric characters, hyphen ('-') and underscore ('_')  are allowed in custom URL suffix\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "412": {
            "x-summary": "Precondition Failed",
            "description": "App Code  | Description\n----------------|---------\ngen.1412 | Precondition Failed\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/shortUrls/{shortUrl}": {
      "patch": {
        "tags": [
          "SmartClick"
        ],
        "summary": "Update a Long URL by SmartURL",
        "description": "**Description:** Updates a Long URL associated with a SmartURL.\n\n**Use Case:** If the Long URL of a web page changes, the client must update the SmartURL to reflect that change.\n\n*Example:* A client changes the URL of an important web page, such as their privacy policy page. To update the SmartURL for that page in their opt-in message, they would use this API.\n\n**Note:** SmartURLs must be encoded for a successful update request. URL encoding is a mechanism for translating unprintable or special characters to a universally accepted format by web servers and browsers.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group in which the SmartURL to be updated resides.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shortUrl",
            "in": "path",
            "description": "The SmartURL being updated",
            "example": "https://s.s-url.pro/bDHpov",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShorturlsUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ShorturlsUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ShorturlsUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLongURLbyShortURLExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nslk.1001| Long URL is required\nslk.1002| ShortURL setting should be enabled\nslk.1006| Short URL is required\nslk.1007| Only HTTPS URLs are supported in the long url field\nslk.1009| Custom short url not found\nslk.1010| Invalid URI\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "412": {
            "x-summary": "Precondition Failed",
            "description": "App Code  | Description\n----------------|---------\ngen.1412 | Precondition Failed\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/keywords": {
      "get": {
        "tags": [
          "Keyword"
        ],
        "summary": "Get All Keywords by Group ID",
        "description": "**Description:** Returns a list of all client-created keywords in a specified group. The list includes information on email and SMS notifications and to whom they are sent.\n\n**Use Case:** A client wants a list of active keywords in a group, and needs to know who is receiving notifications if they have been set up.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group from which keywords will be retrieved.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Number of pages in the query return.",
            "example": 5,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items on each returned page.",
            "example": 50,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordListPagedResponseExternalApiResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ng.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/phonenumbers/{msisdn}/events?countryCode=US": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get Deactivation Events for a Single Number",
        "description": "**Description:** Returns all service changes to a single mobile number and will return all deactivations and ported events based on a provided date range.\n\n**Use Case:** Before sending a message to a subscriber, a client may want to determine if the mobile number has been deactivated since their last communication.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group of which the subscriber is a member.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msisdn",
            "in": "path",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Start date of query.",
            "example": "2023-12-25T00:00:00Z",
            "required": false,
            "schema": {
              "type": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "End date of query.",
            "example": "2024-05-17T00:00:00Z",
            "required": false,
            "schema": {
              "type": "date-time"
            }
          },
          {
            "name": "CountryCode",
            "in": "query",
            "description": "Country Code is not required to retrieve deact events for US numbers. Currently, SBT only has deact data for US numbers.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Number of pages in the query return.",
            "example": 5,
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items on each returned page.",
            "example": 50,
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeactEventReportExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\ndea.1001| From Date cannot be greater than To Date\ndea.1004| Unsupported CountryCode\nsub.1146| Contact/Subscriber does not exist\nrpt.1005| Mobile number is required\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/shorturls": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get All SmartURLs",
        "description": "**Description:** Gets all SmartURLs created in a specified date range. Data includes: Creation date; date modified; total clicks on the SmartURL.\n\n**Use Case:** This API allows a client to see the performance of their SmartURLs within a specified time frame to determine if they are effective.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of the group being polled.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "search",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Start date of query.",
            "example": "2023-12-25T00:00:00Z",
            "required": false,
            "schema": {
              "type": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "End date of query.",
            "example": "2024-05-17T00:00:00Z",
            "required": false,
            "schema": {
              "type": "date-time"
            }
          },
          {
            "name": "shortUrl",
            "in": "query",
            "description": "A specific SmartURL to include in the search. Narrows results to a specific SmartURL.",
            "example": "s.s-url.pro/bDHpov",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Maximum number of pages in the query return.",
            "example": 5,
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Maximum number of items on each returned page.",
            "example": 50,
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShorturlReportExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nslk.1016| From Date cannot be greater than To Date\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/templates": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Get All Templates In a Group",
        "description": "**Description:** Gets all client-created templates within a group, including the templates' content. \n\n**Use Case:** A client wants to review their current group templates and determine if modifcations are needed.\n\n**Usage Limits:** Supports a maximum of 10 concurrent connections.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of group from which the templates will be retrieved.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search term used to find a template or templates.",
            "example": "textpay001",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Number of pages in the query return.",
            "example": 3,
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items on each returned page.",
            "example": 50,
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTemplateListExternalresponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/templates/{templateId}": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Get Templates by Template ID",
        "description": "**Description:** Retrieves the content for the specified template using the template's ID. \n\n**Use Case:** Clients use this API when they want to check the content of a single template.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group from which template will be retrieved.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Identifying number of the template.",
            "example": "106",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTemplateExternalresponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\ntml.1036| TemplateId is required\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "404": {
            "x-summary": "Not Found",
            "description": "App Code  | Description\n----------------|---------\ngen.1404 | Resource not found\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brandId}/shorturl-clicks": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "SmartURL Click Report for a Brand",
        "description": "**Description:** Retrieves all SmartURLs for a specified brand. Data includes the dates the SmartURL was created and modifed, and the total number of times it was clicked.\n\n**Use Case:** This API allows a client to see the performance of their SmartURLs within a specified time frame to determine if they are effective.",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "The identifier of the brand being polled.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isCustomSuffix",
            "in": "query",
            "description": "Yes/No if the SmartURL has a custom suffix.",
            "example": "true *or* false",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "shortUrl",
            "in": "query",
            "description": "The SmartURL itself.",
            "example": "https://s.s-url.pro/bDHpov",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Start date of query. Default is first of the current month.",
              "example": "2024-05-13T00:00:00Z",
              "default": "First of the current month"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "End date of query. Default is the current date.",
              "example": "2024-05-17T00:00:00Z",
              "default": "Current Date"
            }
          },
          {
            "name": "timeZoneOffset",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Optional offset from UTC.",
              "default": "-00:00"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "description": "Number of pages in the query return.",
              "example": 3,
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "description": "Number of items on each page of the query return.",
              "example": 50,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1200| Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartUrlsReportResponsePaginatedResponse2ExternalApiResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1002| Invalid brandId\r\nrpt.1001| From Date cannot be greater than To Date\r\nrpt.1002| Report can be generated for 60 days only",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1403| Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1500| Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brandId}/shorturl-click-details": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "SmartURL Detailed Click Report for a Brand",
        "description": "**Description:** Returns all SmartURLs for a brand within a specified date range. Data includes each time a subscriber has clicked on the SmartURL, plus date and time, and short and long URLs. It also includes the subscriber's IP address, operating system, and device information.\n\n**Use Case:** Clients use this API to analyze how their subscribers are using SmartURLs. Clients can also use the subscriber device information to customize SmartURL content.",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "The identifier of the brand being polled.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isCustomSuffix",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "shortUrl",
            "in": "query",
            "description": "The SmartURL itself.",
            "example": "https://s.s-url.pro/bDHpov",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Start date of query. Default is first of the current month.",
              "example": "2024-05-13T00:00:00Z"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "End date of query. Default is the current date.",
              "example": "2024-05-17T00:00:00Z"
            }
          },
          {
            "name": "timeZoneOffset",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Optional offset from UTC.",
              "default": "-00:00"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "description": "Number of pages in the query return.",
              "example": 3,
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "description": "Number of items on each page of the query return.",
              "example": 50,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1200| Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShortUrlReportResponsePaginatedResponse2ExternalApiResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1002| Invalid brandId\r\nrpt.1001| From Date cannot be greater than To Date\r\nrpt.1002| Report can be generated for 60 days only",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1403| Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1500| Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brandId}/subscribers/status": {
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get Subscriber Status at Brand Level",
        "description": "**Description:** Checks the availability of a phone number within all consent categories associated with a particular brand. It allows clients to determine if a subscriber has opted in to receive Marketing or Non-Marketing messages. It can be used to check for the user’s status within a specific brand.\n\n**Use Case:** Used when the client needs to determine if a user has opted in to receive messages, or to check the consent categories the user has opted into.\n\n**Usage Limits:** This call can verify one phone number at a time.",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "The brand of which the subscriber is a member.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msisdn",
            "in": "query",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1200| Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandSubscriberStatusListExternalApiResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\r\n----------------|---------\r\n-1| Downstream server error\nbrd.1001| BrandId is required\r\nbrd.1002| Invalid BrandId\nsub.1144| Mobile number is required\nsub.1013| Mobile number is invalid\ngen.1400| Bad request\nbrd.1006| Brand configured incorrectly\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "401": {
            "x-summary": "Unauthorized",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1401 | Unauthorized\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1403| Forbidden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "404": {
            "x-summary": "Not Found",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1404| Not Found\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1500| Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brandId}/subscribers": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Add Subscriber to a Brand",
        "description": "**Description:** Adds a Subscriber to a brand and all messaging groups within that brand. It adds one Subscriber per call; each Subscriber to be added requires a separate API call. It also initiates the process to obtain the opt-in consent as specified during the API call.\n\nConsent may be determined/specified by one of the following means:\n* A keyword response by a subscriber. The subscriber replies with a keyword selected by the client. The keyword can be as simple as YES.\n* A one-time PIN. The subscriber replies with a PIN code sent by the client, which can be entered by the subscriber into a web form or read to an agent. See *Confirm Brand Subscriber with PIN* for the corresponding API call to confirm the PIN.\n* Opt-In. The subscriber is notified that they have been added to a brand with the option to opt out by a replying with a STOP keyword.\n* Silent Opt-In. The subscriber is added to a brand without any notification. However, the user is free to opt-out by replying with a STOP keyword.",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "The brand to which the subscriber will be added.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactParamRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactParamRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactParamRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "x-summary": "Created",
            "description": "App Code  | Description\r\n----------------|---------\r\ng.2201| Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberStatusResponseExternalApiResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1002| Invalid Brand ID\r\nsub.1144| Mobile number required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "401": {
            "x-summary": "Unauthorized",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1401 | Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1403| Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "409": {
            "x-summary": "Conflict",
            "description": "App Code  | Description\r\n----------------|---------\r\nsub.1019| Subscriber exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "428": {
            "x-summary": "Precondition Required",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1003| Consent category is not associated to brand\r\nbrd.1005| Brand level optin is not enabled for this brand. Please contact the support team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1500| Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/brands/{brandId}/subscribers": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Add Subscriber to a Brand (v2)",
        "description": "**NOTE: The path has been updated for this API.**\n\n**Description:** Adds a Subscriber to a brand and all messaging groups within that brand. It adds one Subscriber per call; each Subscriber to be added requires a separate API call. It also initiates the process to obtain the opt-in consent as specified during the API call.\n\nConsent may be determined/specified by one of the following means:\n* A keyword response by a subscriber. The subscriber replies with a keyword selected by the client. The keyword can be as simple as YES.\n* A one-time PIN. The subscriber replies with a PIN code sent by the client, which can be entered by the subscriber into a web form or read to an agent. See *Confirm Brand Subscriber with PIN* for the corresponding API call to confirm the PIN.\n* Opt-In. The subscriber is notified that they have been added to a brand with the option to opt out by a replying with a STOP keyword.\n* Silent Opt-In. The subscriber is added to a brand without any notification. However, the user is free to opt-out by replying with a STOP keyword.",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "The brand to which the subscriber will be added.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactParamRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactParamRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactParamRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "x-summary": "Created",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1200| Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberStatusResponseExternalApiResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1002 | Invalid Brand ID\nsub.1013 | Mobile number is invalid\nsub.1143 | Verification type is not allowed\nsub.1144 | Mobile number required\nsub.1149 | Properties name is mandatory",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1403| Forbidden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "409": {
            "x-summary": "Conflict",
            "description": "App Code  | Description\r\n----------------|---------\r\nsub.1019| Subscriber exists\nsub.1021 | msisdn already under verification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "428": {
            "x-summary": "Precondition Required",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1003| Consent category is not associated to brand\r\nbrd.1005| Brand level optin is not enabled for this brand. Please contact the support team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1500| Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/brands/{brandId}/subscribers/{msisdn}/verification": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Confirm Brand Subscriber with PIN",
        "description": "**Description:** The second half of the Add Subscriber workflow; it is implemented when a client is using a one-time PIN for opt-in consent from the user. The PIN can be entered by client personnel when read back by the customer during a voice call. The Client may also implement a web interface for the Subscriber to enter the PIN themselves.\n\n**Use Case:** Used if the client or their subscribers want an extra layer of security for the opt-in consent process.\n\n*Example:* A company modifies its enrollment process for new customers. They include a phone number field on their online portal’s enrollment form which allows new customers to enter a cell phone number. The portal then makes an Add Subscriber request with the PIN opt-in method, and the portal platform sends a PIN to the new customer.\n\nThe new customer enters the PIN back into the web portal. There are two possible outcomes:\n1. If the PIN entered by the new customer does not match the PIN generated in response to the Add Subscriber call, the portal should display an error and ask the customer to re-enter the PIN.\n2. If the PIN entered by the new customer matches the PIN generated in response to the Add Subscriber call, the portal should invoke the Confirm Subscriber with PIN API call to complete adding the new customer as a subscriber to the T2C platform. The T2C platform will then send an opt-in confirmation message to the subscriber.",
        "parameters": [
          {
            "name": "brandId",
            "in": "path",
            "description": "The brand to which the subscriber will be added.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msisdn",
            "in": "path",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmVbtWithPinByBrandRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmVbtWithPinByBrandRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmVbtWithPinByBrandRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "x-summary": "Created",
            "description": "App Code  | Description\r\n----------------|---------\r\ng.2201| Created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfirmMultiSubscriptionVerificationResponseExternalApiResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\r\n----------------|---------\r\n-1| Downstream server error\nbrd.1001| BrandId is required\r\nbrd.1002| Invalid BrandId\r\nsub.1013| Mobile number is invalid\r\nsub.1142| Invalid or expired pin\r\nsub.1144| Mobile number is required\r\nsub.1145| PIN is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "401": {
            "x-summary": "Unauthorized",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1401 | Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbidden",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1403| Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "404": {
            "x-summary": "Not Found",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1404| Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "428": {
            "x-summary": "Precondition Failed",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1005| Brand level optin is not enabled for this brand. Please contact the support team.\r\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1500| Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reports/usage/brand-breakdown": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Brand Usage Report",
        "description": "**Description:** This API pulls data for messaging operations, or *Product Types*, for an entire Account or a specified Brand:\n* Volume (actual count)\n* Rate per Product Type\n* Usage (count times rate)\n\nIf no Brand is specified, data for all Brands in the Account will be returned.\n\nData can be retrieved for all products or for a single product such as Outbound MMS.\n\n**Note:** The previous month’s usage is not completed until the fifth business day of the following month. That delay allows for any manual adjustments.\n\n**Important:** This API is only available for customers and partners on our subscription model. Product Types and Rates are established based on the customer’s current subscription agreement.",
        "parameters": [
          {
            "name": "brandId",
            "in": "query",
            "description": "The identifier for a specific brand to be polled.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productType",
            "in": "query",
            "description": "The type of messaging operation to be searched on. Types:\n* CarrierLookup\n* inboundSMS\n* outboundCompliance\n* outboundSMS\n* ExtraoutboundCompliance\n* outboundComplianceMMS\n* outboundMMS\n* inboundMMS\n* ExtraoutboundSMS\n* smartclick",
            "example": "outboundSMS",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month in which to search. Two-number format. Examples: Apr = 04, Nov = 11.",
            "example": "04",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year in which to search. Four-number format. Example: 2024.",
            "example": "2024",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1200| Request successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandUsageResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\r\n----------------|---------\r\nrpt.1016| Please enter valid Month\r\nrpt.1018| Month is required\r\nrpt.1019| Year is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1500| Internal Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{{groupId}}/subscribers": {
      "put": {
        "tags": [
          "Subscription"
        ],
        "summary": "Update Subscriber Data in a Brand",
        "description": "**Description:** Changes subscriber information like first name, last name, and other values, within a single brand.\n\nSubscribers can be listed in multiple brands of the same account. However, each brand must maintain a separate copy of the subscriber’s information: first name, last name, and any other unique and relevant information.\n\nAll groups within a brand share the same subscriber information. Subscribers are added and maintained at the group level, so their information is also visible to the parent brand.\n\n**Note:** The organizational unit specified during the API call is a group which is a subunit of the target brand, using the *groupId* parameter seen below. The subscriber information for that group then cascades up into the target brand. Any other groups the subscriber belongs to which reside in that brand will then receive the same updated subscriber information.\n\n**Use Case:** A typical scenario for using this API is a name change when a customer gets married.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactParam"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactParam"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContactParam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nsub.1013| Mobile number is invalid\nsub.1144| Mobile number is required\nsub.1146| Subscriber does not exist\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbidden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/messages": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Send Message to Subscribers",
        "description": "**Description:** Sends a single, one-time message to one or more subscribers in a Group. Message types:\n* Unicast: Addressed to a single subscriber. Example: A welcome message.\n* Multicast: Addressed to multiple subscribers, but not an entire group. Example: Payment reminders for subscribers with bills coming due.\n\n**Use Case:** Send Message should be used to send a unique, one-time message to one or more subscribers. It is often used in two-way texting applications where a representative has a live conversation via text with a customer through a user interface.\n\n**Usage Limits:** Please observe the following limits when calling this API:\n* No more than 10 concurrent API calls.\n* No more than 100 subscribers per API call.\n\nExceeding these limits will result in degradation of the T2C application's performance.\n\n**Important:** SBT highly recommends running the [*Get Subscriber Status*](#tag/Subscription/paths/~1groups~1{groupId}~1subscribers~1status/get) API before sending any messages using Send Message to Subscribers to ensure the intended recipient subscriber phone numbers are active.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group to which the message will be sent.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Value",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InteractionBroadcastMessageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InteractionBroadcastMessageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InteractionBroadcastMessageRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "x-summary": "Accepted",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nsub.1013| Mobile number is invalid\nsub.1144| Mobile number is required\nmsg.1030| Message is required\nmsg.1033| Message type is invalid.\nmsg.1046|Content type is not supported\nmsg.1047|Content Size is greater than maximum allowed size\nmsg.1049|Malformed content received in Base 64 format. Unable to decode.\nmsg.1051|File extension not supported\nmsg.1052|Timeout when accessing URL\nmsg.1052|Timeout when accessing URL. Status code = {{status code}}\nmsg.1053|Error encountered when accessing URL\nmsg.1053|Error encountered when accessing URL. Status code = {{status code}}\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/template-messages": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Send Template Message to Subscribers",
        "description": "**Description:** Sends a prewritten message to one or more subscribers within a group. Message types:\n* Unicast: Addressed to a single Subscriber. Example: A welcome message.\n* Multicast: Addressed to multiple Subscribers, but not an entire Group. Example: Payment reminders for Subscribers with bills coming due.\n\n**Use Case:** Send Template Message to Subscribers allows an organization to create standardized messages for repeat use in typical scenarios. It is typically used in messaging campaigns or other instances when multiple subscribers are sent the same message. However, it can be used to send a message to a single subscriber.\n\n**Usage Limits:** Please observe the following limits when calling this API:\n* No more than 10 concurrent API calls.\n* No more than 100 subscribers per API call.\n\nExceeding these limits will result in degradation of the T2C application's performance.\n\n**Important:** SBT highly recommends running the [*Get Subscriber Status*](#tag/Subscription/paths/~1groups~1{groupId}~1subscribers~1status/get) API before sending any messages using Send Message to Subscribers to ensure the intended recipient subscriber phone numbers are active.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group to which the message will be sent.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Value",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InteractionBroadcastTemplateMessageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/InteractionBroadcastTemplateMessageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/InteractionBroadcastTemplateMessageRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "x-summary": "Accepted",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nsub.1013| Mobile number is invalid\ntml.1036|TemplateId is required\ntml.1037|TemplateId does not exist in the group\nsub.1144| Mobile number is required\nmsg.1046|Content type is not supported\nmsg.1047|Content Size is greater than maximum allowed size\nmsg.1049|Malformed content received in Base 64 format. Unable to decode.\nmsg.1051|File extension not supported\nmsg.1052|Timeout when accessing URL\nmsg.1052|Timeout when accessing URL. Status code = {{status code}}\nmsg.1053|Error encountered when accessing URL\nmsg.1053|Error encountered when accessing URL. Status code = {{status code}}\nmsg.1055|MMS messages can be sent to a maximum of 100 subscribers\nmsg.1056|Broadcast message does not support MMS\nmsg.1061|TemplateName does not exist in the group\nmsg.1033| Message type is invalid.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/schedule-messages": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Send Scheduled Message to Subscribers",
        "description": "**Description:** Sends a single, one-time message set to be sent at a time specified by the client to one or more subscribers in a Group.\n\n**Use Case:** This API is used to send a unique, one-time message to one or more subscribers at a specific time.\n\n**Usage Limits:** Please observe the following limits when calling this API:\n* No more than 10 concurrent API calls.\n* No more than 100 subscribers per API call.\n\nExceeding these limits will result in degradation of the T2C application's performance.\n\n**Important:** SBT highly recommends running the [*Get Subscriber Status*](#tag/Subscription/paths/~1groups~1{groupId}~1subscribers~1status/get) API before sending any messages using Send Message to Subscribers to ensure the intended recipient subscriber phone numbers are active.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group to which the message will be sent.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleMessageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleMessageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleMessageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Accepted\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateScheduleMessageExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nmsg.1030| Message is required\nmsg.1035| Scheduled time should be greater than 15 minutes from current time\nmsg.1046|Content type is not supported\nmsg.1047|Content Size is greater than maximum allowed size\nmsg.1049|Malformed content received in Base 64 format. Unable to decode.\nmsg.1051|File extension not supported\nmsg.1052|Timeout when accessing URL\nmsg.1052|Timeout when accessing URL. Status code = {{status code}}\nmsg.1053|Error encountered when accessing URL\nmsg.1053|Error encountered when accessing URL. Status code = {{status code}}\nmsg.1055| MMS messages can be sent to a maximum of 100 subscribers\nmsg.1056| Broadcast message does not support MMS\nmsg.1059| Scheduled time should be within 7 days of current time\nmsg.1064| Invalid scheduledatetime. The value cannot be null, empty, or default.\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/schedule-template-messages": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Send Scheduled Template Message to Subscribers",
        "description": "**Description:** Sends a prewritten template message to one or more subscribers within a group at a specified time.\n\n**Use Case:** This API allows clients to send standardized messages for repeat use in typical scenarios. It is typically used in messaging campaigns or other instances when multiple subscribers are sent the same message. However, it can be used to send a message to a single subscriber.\n\n**Usage Limits:** Please observe the following limits when calling this API:\n* No more than 10 concurrent API calls.\n* No more than 100 subscribers per API call.\n\nExceeding these limits will result in degradation of the T2C application's performance.\n\n**Important:** SBT highly recommends running the [*Get Subscriber Status*](#tag/Subscription/paths/~1groups~1{groupId}~1subscribers~1status/get) API before sending any messages using Send Message to Subscribers to ensure the intended recipient subscriber phone numbers are active.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group to which the message will be sent.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTemplateMessageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTemplateMessageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTemplateMessageRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Accepted\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateScheduleMessageExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nmsg.1035| Scheduled time should be greater than 15 minutes from current time\nmsg.1046|Content type is not supported.\nmsg.1047|Content Size is greater than maximum allowed size\nmsg.1049|Malformed content received in Base 64 format. Unable to decode.\nmsg.1051|File extension not supported\nmsg.1052|Timeout when accessing URL\nmsg.1052|Timeout when accessing URL. Status code = {{status code}}\nmsg.1053|Error encountered when accessing URL\nmsg.1053|Error encountered when accessing URL. Status code = {{status code}}\nmsg.1055| MMS messages can be sent to a maximum of 100 subscribers\nmsg.1059| Scheduled time should be within 7 days of current time\nmsg.1061|TemplateName does not exist in the group\nmsg.1064| Invalid scheduledatetime. The value cannot be null, empty, or default.\ntml.1036|TemplateId is required\ntml.1037|TemplateId does not exist in the group\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/media-messages/{messageId}/file/{fileId}": {
      "get": {
        "tags": [
          "Message"
        ],
        "summary": "MMS Retrieve",
        "description": "**Description:** Retrieves and saves images from the MMS file stream. The image will be saved to the client's system.\n\n**Use Case:** A customer/subscriber sends images of required documents, such as a driver's license or pay stub. The client uses this API to download the images to their system for permanent storage.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group from which the MMS file will be retrieved.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "Message tracking ID number from SBT.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The MMS file's ID number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request Successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nmsg.1042| Message ID is required\nmsg.1043| File id is required\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "404": {
            "x-summary": "Not Found",
            "description": "App Code  | Description\n----------------|---------\nmsg.1044 | File not found\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Message"
        ],
        "summary": "MMS Delete",
        "description": "**Description:** Deletes saved inbound MMS images from the SBT system. Note: MMS images are automatically deleted from the SBT system seven days after they are received.\n\n**Use Case:** The images received likely contain sensitive, personal, or proprietary information. Clients can use this API to delete the images immediately after they are stored on their systems.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group from which the MMS file will be retrieved.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "Message tracking ID number from SBT.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The MMS file's ID number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request Successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\n-1| Downstream server error\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nmsg.1042| Message id is required \nmsg.1043 | File id is required\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbiddden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "404": {
            "x-summary": "Not Found",
            "description": "App Code  | Description\n----------------|---------\nmsg.1044 | File not found\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/outbound-messages": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get Sent Message Details",
        "description": "**Description:** Generates a report on outbound messages. It can check for message and audit information including the following:\n* How many messages were sent in a campaign?\n* How many opt-in messages were sent?\n* Were reminder messages—for example, for payments—sent on time?",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The identifier of the group being polled.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "description": "Tracking ID number of the message.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceId",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "description": "Start date of query. Default is first of the current month.",
            "example": "2024-05-13T00:00:00Z",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "description": "End date of query. Default is the current date.",
            "example": "2024-05-17T00:00:00Z",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeZoneOffset",
            "in": "query",
            "description": "Optional offset from UTC.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of message sent.",
            "schema": {
              "$ref": "#/components/schemas/OutboundMessageTypes"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Number of pages in the query return.",
            "example": 3,
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of items on each page of the query return.",
            "example": 50,
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatConversationPaginatedResponse2ExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nrpt.1001| From Date cannot be greater than To Date\nrpt.1002| Report can be generated for 60 days only\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/inbound-messages": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get Inbound Message Details",
        "description": "**Description:** Generates a report on inbound messages.\n\n**Use Case:** Can be used to check for received messages; it can also be automated to periodically check. If the client has not implemented a webhook or callback to alert for inbound messages, then Get Inbound Message Details is the only option.\n\nThis call can also be used to verify or audit that the organization has responded to all customer queries sent via text.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "groupId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceId",
            "description": "note field trackingId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "description": "fromDate accept in mm/dd/yyyyy hh:mm:ss",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "description": "toDate accept in mm/dd/yyyyy hh:mm:ss",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeZoneOffset",
            "description": "get details based on timezone",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/InboundMessageTypes"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatConversationPaginatedResponse2ExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nrpt.1001| From Date cannot be greater than To Date\nrpt.1002| Report can be generated for 60 days only\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/odm/message": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Send On-Demand Message",
        "description": "**Description:** This API allows the client to send an On Demand Message (ODM) to a single phone number based on a predefined template.  The template must be pre-loaded by SBT customer support before using this API.\n\nThe template can contain custom variables which can be substituted by the client during the API call.  Additionally, the template may contain the variable *SystemPIN* which will be substituted with a randomly generated 6-digit PIN during message dispatch.  This PIN may be verified subsequently using the confirmation API described next.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group of which the subscriber is a member.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ODMpayload"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ODMpayload"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ODMpayload"
              }
            }
          }
        },
        "responses": {
          "202": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupID required\ngrp.1002| Invalid GroupId\ngrp.1026| On Demand Messaging not available for group provided\nsub.1013| Mobile number is invalid\nsub.1144| Mobile number is required\ntml.1039| Template must be specified for ODM message\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbidden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/odm/{msisdn}/verification": {
      "post": {
        "tags": [
          "Message"
        ],
        "summary": "Send On-Demand Message PIN",
        "description": "**Description:** This API allows the client to verify if the consumer has received the PIN sent by the most recent call of the ODM API.\n\n**Note:** The PIN must be verified by the consumer/subscriber within 20 minutes of being sent.",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group from which the MMS file will be retrieved.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msisdn",
            "in": "path",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "Message tracking ID number from SBT.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmVbtMessageRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmVbtMessageRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmVbtMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseExternalApiResponseODMPIN"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\ngrp.1001| GroupId is required\ngrp.1002| Invalid GroupId\nsub.1013| Mobile number is invalid\n sub.1144| Mobile number is required\nsub.1145| PIN is required\nsub.1155| Expired PIN\nsub.1156| Invalid PIN\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\n----------------|---------\ngen.1403 | Forbidden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/brand-vbt-outbound-messages": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get Brand VBT Outbound Messages",
        "description": "**Description:** Generates a report of messages that were sent to subscribers during brand-level opt-ins.\n\n**Use Case:** Use cases for Brand VBT Outbound Messages would be to seek answers to typical questions pertaining to an opt-in campaign, such as:\n* How many brand-level opt-in messages were sent from a specific brand?\n* How many brand-level opt-in messages were sent within a date range?\n* How many stop or stop-all responses were sent to subscribers?",
        "parameters": [
          {
            "name": "brandId",
            "in": "query",
            "description": "The identifier of the brand being polled.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messageId",
            "description": "Tracking ID number of the message.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceId",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "description": "Start date of query. Default is first of the current month.",
            "example": "2024-05-13T00:00:00Z",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "description": "End date of query. Default is the current date.",
            "example": "2024-05-17T00:00:00Z",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeZoneOffset",
            "in": "query",
            "description": "Optional offset from UTC.",
            "schema": {
              "type": "string",
              "default": "-00:00"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of message sent.",
            "schema": {
              "$ref": "#/components/schemas/BrandVBTOutboundMessages"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "description": "Number of pages in the query return.",
              "example": 3,
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "description": "Number of items on each page of the query return.",
              "example": 50,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1200| Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandVbtMessageReportResponsePaginatedResponse2ExternalApiResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1001| BrandId is required\r\nge.1132| Invalid timezone offset\r\nrpt.1001| From Date cannot be greater than To Date\r\nrpt.1002| Report can be generated for 60 days only",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "401": {
            "x-summary": "Unauthorized",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1401 | Unauthorized\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1403| Forbidden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "428": {
            "x-summary": "Precondition Required",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1005| Brand level optin is not enabled for this brand. Please contact the support team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1500| Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/brand-vbt-inbound-messages": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Get Brand VBT Inbound Messages",
        "description": "**Description:** Generates a report of inbound messages received after brand-level VBT. After adding subscribers via brand-level VBT, clients can send messages and continue the conversation from any of the groups within the brand.  However, it is possible that the subscriber may respond to a brand-level VBT message and that message would not be available in any of the available groups.  This API allows the client to download a report of such messages that were sent right after a brand-level VBT event. \n\n**Use Case:** The brand-vbt inbound messages API can be used be used to check for messages received right after the brand-level VBT.  Use cases would include:\n* How many subscribers responded to brand-VBT opt-in campaign with a STOP or STOPALL?\n* Did any of the subscribers respond to a brand-VBT opt-in campaign with a question?\n* Did any subscriber respond to the brand-VBT opt-in campaign using a HELP?",
        "parameters": [
          {
            "name": "brandId",
            "in": "query",
            "description": "The identifier of the brand being polled.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceId",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "description": "Start date of query. Default is first of the current month.",
            "example": "2024-05-13T00:00:00Z",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "description": "End date of query. Default is the current date.",
            "example": "2024-05-17T00:00:00Z",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "timeZoneOffset",
            "description": "Optional offset from UTC.",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "-00:00"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of message sent.",
            "schema": {
              "$ref": "#/components/schemas/BrandVBTInboundMessages"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "description": "Number of pages in the query return.",
              "example": 3,
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "maximum": 1000,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "description": "Number of items on each page of the query return.",
              "example": 50,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1200| Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandVbtMessageReportResponsePaginatedResponse2ExternalApiResponse"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1001| BrandId is required\r\nge.1132| Invalid timezone offset\r\nrpt.1001| From Date cannot be greater than To Date\r\nrpt.1002| Report can be generated for 60 days only",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "401": {
            "x-summary": "Unauthorized",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1401 | Unauthorized\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "403": {
            "x-summary": "Forbiddden",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1403| Forbidden\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "428": {
            "x-summary": "Precondition Required",
            "description": "App Code  | Description\r\n----------------|---------\r\nbrd.1005| Brand level optin is not enabled for this brand. Please contact the support team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\r\n----------------|---------\r\ngen.1500| Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/phonenumbers-data": {
      "get": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "Get Phone Numbers Data",
        "description": "**Description:** Obtains information about a specified number (or numbers). It provides metadata about the number—if it is a valid cell phone number and if so, information about the carrier.\n\n**Use Case:** This API call should be the first run when a company is importing cell phone numbers from a CRM. Before adding the numbers with the Add Subscriber call, the numbers should be validated using Get Phone Numbers Data.\n\n**Usage Limits:** This API can check information for up to 10 phone numbers in a single call.\n\n**Important:** Get Phone Numbers Data may be called using either an Account- or Brand-level API key. Ensure you have generated and are using a Brand-level API key if you want usage information for a Brand within your Account. Otherwise, information for the entire Account will be collected.\n\n**Query Format:** Add each phone number/MSISDN to the endpoint URL. Example:\n\n{Production or Staging Endpoint}/phonenumbers-data&msisdn=12345678910\n&msisdn=13456789123&msisdn=14567891234&msisdn=15678912345&msisdn=16789123456",
        "parameters": [
          {
            "name": "msisdn",
            "required": true,
            "in": "query",
            "description": "Mobile numbers with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includes",
            "in": "query",
            "description": "Carrier specifier.",
            "schema": {
              "$ref": "#/components/schemas/Includes"
            }
          }
        ],
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneNumberResponseDetailsListExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "x-summary": "Bad Request",
            "description": "App Code  | Description\n----------------|---------\nphn.1001| Phone number cannot be blank\nphn.1002| Phone number cannot be more than 10 digits\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          },
          "500": {
            "x-summary": "Internal Error",
            "description": "App Code  | Description\n----------------|---------\ngen.1500 | Internal Error\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "Outbound": {
      "post": {
        "summary": "Outbound Message Status",
        "description": "**Description:** This webhook is triggered as a message sent by a Client progresses to a Subscriber.\n\nIt allows Clients to track the progress of sent messages. When the message is queued or delivered, or if a problem is encountered, Outbound Message Status will send the relevant Status Code to the Client's target URL.\n\nSee *Status Codes* below for a full list of codes.",
        "operationId": "Outbound",
        "tags": [
          "Webhook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageStatusRequestPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "Inbound": {
      "post": {
        "summary": "Inbound Message Status",
        "description": "**Description:** This webhook is triggered by receipt of a message to a Client’s SBT Account. Every message received sends the JSON payload to the Client's target URL.\n\n**Use Case:** The data can be used to alert agents that a message was received, to send automated responses, or for any other purpose required by the client.\n\n**Delete Subscriber Stop:** When the *Delete Subscriber* API is called, SBT posts a stop to this webhook.\n\n**OriginalMessage and Message Fields:** These fields will typically carry the same content, notably in the case of two-way chat. However, when a consumer sends in a reserved word, the *Message* field returns info on the keyword operation being executed—STOP, STOPALL, or HELP—while the Original Message will contain the verbatim message.",
        "operationId": "Inbound",
        "tags": [
          "Webhook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboundMessagesRequestPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "Inbound MMS": {
      "post": {
        "summary": "Inbound MMS Status",
        "description": "**Description:** Sends the client alerts when inbound messages with MMS attachments are received, and includes the data required to retrieve and save the MMS images. \n\n**Use Case:** A Client wants to know when an MMS image is received as an inbound message so that they can retrieve the image and store it in their system.",
        "operationId": "InboundMMS",
        "tags": [
          "Webhook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InboundMMSRequestPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "SmartURL": {
      "post": {
        "summary": "SmartURL Click",
        "description": "**Description:** The webhook acts as a trigger when a user clicks on a SmartURL. It then sends the click event details, to the Client's URL set up at the brand-level webhook configuration.\n\n**Use Case:** The SmartURL click event acts as a monitoring mechanism for the clients, alerting them as and when a SmartURL has been clicked with the details of the click event.",
        "operationId": "SmartURL",
        "tags": [
          "Webhook"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmartUrlClickEventRequestPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "x-summary": "Success",
            "description": "App Code  | Description\n----------------|---------\ngen.1200 | Request successful\n\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalApiResponseNew"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountCancelRequest": {
        "type": "object",
        "properties": {
          "reasonforcancel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountRegistrationResponse": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "silentLoginDetails": {
            "$ref": "#/components/schemas/PasswordlessLoginTokenResponse"
          }
        },
        "additionalProperties": false
      },
      "AccountRegistrationResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AccountRegistrationResponse"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountsResilience": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "nullable": true
          },
          "externalAccountId": {
            "type": "string",
            "nullable": true
          },
          "externalAccountName": {
            "type": "string",
            "nullable": true
          },
          "sbtAccountId": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountStatusRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "nullable": true
          },
          "reasonforsuspend": {
            "type": "string",
            "nullable": true
          },
          "resonforreactivate": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterAccountParamUpdate": {
        "type": "object",
        "properties": {
          "registerCompany": {
            "$ref": "#/components/schemas/RegisterCompany"
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "planId": {
            "type": "string",
            "nullable": true
          },
          "registerUser": {
            "$ref": "#/components/schemas/RegisterUser"
          },
          "registerCompany": {
            "$ref": "#/components/schemas/RegisterCompany"
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "paymentDetail": {
            "$ref": "#/components/schemas/PaymentDetail"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Billing"
          },
          "billingAccountDetails": {
            "$ref": "#/components/schemas/BillingAccountDetails"
          },
          "accountStatus": {
            "type": "string",
            "nullable": true
          },
          "accountStatusDate": {
            "type": "string",
            "format": "date-time"
          },
          "fundingStatus": {
            "type": "string",
            "nullable": true
          },
          "fundingStatusDate": {
            "type": "string",
            "format": "date-time"
          },
          "paymentStatus": {
            "type": "string",
            "nullable": true
          },
          "paymentStatusDate": {
            "type": "string",
            "format": "date-time"
          },
          "failureCount": {
            "type": "integer",
            "format": "int32"
          },
          "suspensionReason": {
            "type": "string",
            "nullable": true
          },
          "reactivationReason": {
            "type": "string",
            "nullable": true
          },
          "cancellationReason": {
            "type": "string",
            "nullable": true
          },
          "privatePlan": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrivatePlan"
            },
            "nullable": true
          },
          "billingContact": {
            "$ref": "#/components/schemas/BillingContact"
          },
          "communicationCodes": {
            "$ref": "#/components/schemas/CommunicationCodes"
          },
          "replenishmentBillingDate": {
            "type": "string",
            "format": "date-time"
          },
          "sbtAccountId": {
            "type": "string",
            "nullable": true
          },
          "softwarePartners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "brands": {
            "$ref": "#/components/schemas/OrgunitResponse"
          }
        },
        "additionalProperties": false
      },
      "RegisterAccountExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RegisterAccount"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterAccountPaginatedResponse2ExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RegisterAccountPaginatedResponse2"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterAccountParam": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "nullable": true
          },
          "registerUser": {
            "$ref": "#/components/schemas/RegisterUser"
          },
          "phoneVerificationToken": {
            "type": "string",
            "nullable": true
          },
          "registerCompany": {
            "$ref": "#/components/schemas/RegisterCompany"
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "sbtAccountId": {
            "type": "string",
            "nullable": true
          },
          "softwarePartners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterAccountPaginatedResponse2": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RegisterAccount"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Aggregator": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AggregatorListExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Aggregator"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "AggregatorStatus": {
        "enum": [
          "A",
          "Active",
          "Inactive",
          "Temp"
        ],
        "type": "string"
      },
      "ApiRoleResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BatchResponse": {
        "type": "object",
        "properties": {
          "batchId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BatchResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "BillingContact": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "notificationEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Billing": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "addressLine1": {
            "type": "string",
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BillingDetailsParam": {
        "type": "object",
        "properties": {
          "billingAddress": {
            "$ref": "#/components/schemas/Billing"
          }
        },
        "additionalProperties": false
      },
      "BillingAccountDetails": {
        "type": "object",
        "properties": {
          "billingCycle": {
            "type": "string",
            "nullable": true
          },
          "billingStartDate": {
            "type": "string",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "nullable": true
          },
          "paymentDetails": {
            "type": "string",
            "nullable": true
          },
          "payableamount": {
            "type": "string",
            "nullable": true
          },
          "paymentExpiry": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetReplenishmentBillingDate": {
        "type": "object",
        "properties": {
          "replenishmentBillingDate": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetReplenishmentBillingDateExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GetReplenishmentBillingDate"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrandSubscriberStatusListExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandSubscriberStatus"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "BrandUsageResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BrandUsageReport"
          },
          "appCode": {
            "type": "string",
            "example": "Request successful.",
            "nullable": true,
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "example": "gen.1200",
            "nullable": true,
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "BrandUsageReport": {
        "type": "object",
        "properties": {
          "brandId": {
            "type": "string",
            "nullable": true,
            "description": "The identifier of the brand being polled.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb"
          },
          "brandName": {
            "type": "string",
            "nullable": true,
            "description": "Name of the brand polled.",
            "example": "W-Y Auto Finance"
          },
          "productType": {
            "$ref": "#/components/schemas/productType"
          }
        },
        "additionalProperties": false
      },
      "productType": {
        "type": "object",
        "properties": {
          "productType": {
            "type": "string",
            "description": "The type of messaging operation searched for. ",
            "example": "outboundSMS",
            "nullable": true
          },
          "volume": {
            "type": "integer",
            "description": "Number of messages or operations of that type sent, received, or made during the specified time frame.",
            "example": 24,
            "nullable": true
          },
          "ratePerProductType": {
            "type": "integer",
            "description": "",
            "example": 0.04,
            "nullable": true
          },
          "usage": {
            "type": "integer",
            "description": "",
            "example": 0.96,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "C2WApp": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tokenLifetime": {
            "type": "integer",
            "format": "int32"
          },
          "appId": {
            "type": "string",
            "nullable": true
          },
          "appSecret": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "allCampusAccess": {
            "type": "boolean"
          },
          "campusId": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "C2WAppIEnumerableExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/C2WApp"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ChatConversation": {
        "type": "object",
        "properties": {
          "subscriber": {
            "$ref": "#/components/schemas/SubscriberResponseInbox"
          },
          "messageId": {
            "type": "string",
            "description": "Tracking ID number of the message.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "nullable": true
          },
          "deliveryStatus": {
            "type": "string",
            "description": "Message status when the API was called.",
            "example": "Delivered",
            "nullable": true
          },
          "deliveryStatusCode": {
            "type": "string",
            "description": "Message status code when the API was called.",
            "example": "100",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Message content.",
            "example": "Hello! Your account is currently at $426. Contact us for more...",
            "nullable": true
          },
          "templateId": {
            "type": "integer",
            "example": 1,
            "description": "Identifying number of the template.",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/MessageType"
          },
          "referenceId": {
            "type": "string",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "nullable": true
          },
          "communicationCode": {
            "type": "string",
            "description": "Short Code or 10DLC used to send the message.",
            "example": "54321",
            "nullable": true
          },
          "sentAt": {
            "type": "string",
            "description": "Time the message was sent from SBT.",
            "example": "2024-04-22T016:50:00.00Z",
            "format": "date-time",
            "nullable": true
          },
          "receivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time the message was received by the handset.",
            "example": "2024-04-22T016:51:25.00Z",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/UserDetails"
          },
          "sentTimeLocal": {
            "type": "string",
            "format": "date-time",
            "description": "Local time the message was sent from SBT (with *timeZoneOffset*).",
            "example": "2024-04-22T011:50:00.00Z",
            "nullable": true
          },
          "deliveredTimeLocal": {
            "type": "string",
            "format": "date-time",
            "description": "Local time the message was delivered by the carrier (with *timeZoneOffset*).",
            "example": "2024-04-22T011:51:15.00Z",
            "nullable": true
          },
          "receivedTimeLocal": {
            "type": "string",
            "format": "date-time",
            "description": "Local time the message was received by the handset (with *timeZoneOffset*).",
            "example": "2024-04-22T011:51:25.00Z",
            "nullable": true
          },
          "readTimeLocal": {
            "type": "string",
            "format": "date-time",
            "description": "Local time the message was read by the subscriber (with *timeZoneOffset*).",
            "example": "2024-04-22T011:53:31.22Z",
            "nullable": true
          },
          "mediaDetails": {
            "$ref": "#/components/schemas/MediaDetails"
          },
          "totalMessageSegments": {
            "type": "integer",
            "description": "Number of message segments used by the message.",
            "example": 2,
            "format": "int32"
          },
          "messageCategory": {
            "type": "string",
            "description": "Type of message sent.",
            "example": "ReservedKeyword",
            "nullable": true
          },
          "modeOfCommunication": {
            "type": "string",
            "description": "Message type (SMS, MMS, or RCS).",
            "example": "SMS",
            "nullable": true
          },
          "subscriberCustomParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberCustomParams"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChatConversationListExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatConversation"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ChatConversationPaginatedResponse2": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total number of items in the query return.",
            "example": 231,
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Number of pages in the query return.",
            "example": 5,
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChatConversation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChatConversationPaginatedResponse2ExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ChatConversationPaginatedResponse2"
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "ContactParamRequest": {
        "required": [
          "msisdn"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "example": "Mark",
            "nullable": true
          },
          "msisdn": {
            "type": "string",
            "nullable": true,
            "example": "12345678902",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902)."
          },
          "landLineNo": {
            "type": "string",
            "example": "19876543209",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true,
            "description": "Subscriber image URL, if available.",
            "example": "https://example.com/subscribers/image.jpg"
          },
          "email": {
            "type": "string",
            "example": "name@example.com",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "example": "Male",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "example": "1990-11-11T00:00:00Z",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            },
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Properties"
            },
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "example": 33,
            "nullable": true
          },
          "referenceId": {
            "description": "Customer-defined identifier for the subscriber.",
            "example": "M41A",
            "type": "string",
            "nullable": true
          },
          "verification": {
            "$ref": "#/components/schemas/Verification"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variables"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TotalContactCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TotalContactCountExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TotalContactCount"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ContactParam": {
        "required": [
          "msisdn"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "example": "Mark",
            "nullable": true
          },
          "msisdn": {
            "type": "string",
            "example": "12345678902",
            "nullable": true,
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902)."
          },
          "landLineNo": {
            "type": "string",
            "example": "19876543209",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "description": "Subscriber image URL, if available.",
            "example": "https://example.com/subscribers/image.jpg",
            "nullable": true
          },
          "email": {
            "type": "string",
            "example": "name@example.com",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "example": "1990-11-11T00:00:00Z",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "example": "Male",
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "example": 33,
            "nullable": true
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            },
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Properties"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommunicationCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "aggregator": {
            "type": "string",
            "nullable": true
          },
          "supportMultiAssignment": {
            "type": "boolean"
          },
          "allocated": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/AggregatorStatus"
          },
          "brandMessageSupported": {
            "type": "boolean"
          },
          "campaignId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommunicationCodeListExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommunicationCode"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "CommunicationCodes": {
        "type": "object",
        "properties": {
          "commCode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommCode"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommunicationCodesExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CommunicationCodes"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommunicationCodesExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CommunicationCodes"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "CommunicationCodeUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AggregatorStatus"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "supportMultiAssignment": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CommCode": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TotalCoOrdinatorCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TotalCoOrdinatorCountExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TotalCoOrdinatorCount"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateAppRequest": {
        "required": [
          "name",
          "role"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "description": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "role": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateAppResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tokenLifetime": {
            "type": "integer",
            "format": "int32"
          },
          "appId": {
            "type": "string",
            "nullable": true
          },
          "appSecret": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "appSecretFull": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateAppResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CreateAppResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "DeactEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "msisdn": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "dialingCode": {
            "type": "string",
            "nullable": true
          },
          "oldCarrierName": {
            "type": "string",
            "nullable": true
          },
          "oldCarrierId": {
            "type": "string",
            "nullable": true
          },
          "newCarrierId": {
            "type": "string",
            "nullable": true
          },
          "newCarrierName": {
            "type": "string",
            "nullable": true
          },
          "eventDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "mobileStatus": {
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "type": "string",
            "nullable": true,
            "description": "Deactivated,"
          }
        },
        "additionalProperties": false
      },
      "DeactEventReportAccount": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "msisdn": {
            "type": "string",
            "example": "12345678902",
            "nullable": true
          },
          "dialingCode": {
            "type": "string",
            "nullable": true
          },
          "oldCarrierId": {
            "type": "string",
            "description": "SBT platform code for the subscriber's previous carrier.",
            "example": "79",
            "nullable": true
          },
          "oldCarrierName": {
            "type": "string",
            "description": "Name of subscriber's previous carrier.",
            "example": "T-Mobile",
            "nullable": true
          },
          "newCarrierId": {
            "type": "string",
            "description": "SBT platform code for the subscriber's new/current carrier.",
            "example": "383",
            "nullable": true
          },
          "newCarrierName": {
            "type": "string",
            "description": "Name of subscriber's new/current carrier.",
            "example": "AT&T Wireless Inc.",
            "nullable": true
          },
          "mobileStatus": {
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "type": "string",
            "nullable": true
          },
          "eventDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time the deact event occurred.",
            "example": "2024-05-17T11:21:35Z",
            "nullable": true
          },
          "customParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertiesNew"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeactEventReport": {
        "type": "object",
        "properties": {
          "processDateTime": {
            "type": "string",
            "description": "Date and time the request was processed.",
            "example": "2024-05-17T11:21:35Z",
            "format": "date-time",
            "nullable": true
          },
          "oldCarrierId": {
            "type": "string",
            "description": "SBT platform code for the subscriber's previous carrier.",
            "example": "79",
            "nullable": true
          },
          "oldCarrierName": {
            "type": "string",
            "description": "Name of subscriber's previous carrier.",
            "example": "T-Mobile",
            "nullable": true
          },
          "newCarrierId": {
            "type": "string",
            "description": "SBT platform code for the subscriber's new/current carrier.",
            "example": "383",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "Country in which the subscriber resides.",
            "example": "US",
            "nullable": true
          },
          "newCarrierName": {
            "type": "string",
            "description": "Name of subscriber's new/current carrier.",
            "example": "AT&T Wireless Inc.",
            "nullable": true
          },
          "mobileStatus": {
            "type": "string",
            "description": "Confirms that the number is a mobile number.",
            "example": "mobile",
            "nullable": true
          },
          "event": {
            "type": "string",
            "description": "Deact event type. Will be either Deactivated or Ported",
            "example": "Ported",
            "nullable": true
          },
          "eventDate": {
            "type": "string",
            "description": "Date and time the deact event occurred.",
            "example": "2024-09-29T18:33:11Z",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeactEventExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeactEvent"
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "DeactEventReportExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "totalCount": {
                "type": "integer",
                "description": "Total number of items in the query return.",
                "example": 9,
                "format": "int64"
              },
              "totalPages": {
                "type": "integer",
                "description": "Number of pages in the query return.",
                "example": 1,
                "format": "int32"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeactEventReport"
                },
                "nullable": true,
                "readOnly": true
              }
            }
          },
          "appCode": {
            "type": "string",
            "example": "gen.1200",
            "description": "API response code (see table above).",
            "nullable": true
          },
          "message": {
            "type": "string",
            "example": "Request successful",
            "description": "API response message (see table above).",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "description": "If no error, *false*. If error, *true*.",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "AddGroupResponse": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddGroupResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AddGroupResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "AddressForGetAllSubcriberInGroup": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "nullable": true,
            "example": "7910 Noemie Knoll"
          },
          "address2": {
            "type": "string",
            "nullable": true,
            "example": "Apt 101"
          },
          "city": {
            "type": "string",
            "nullable": true,
            "example": "Madylinland"
          },
          "state": {
            "type": "string",
            "nullable": true,
            "example": "CO"
          },
          "postalCode": {
            "type": "string",
            "nullable": true,
            "example": "99582"
          },
          "countryCode": {
            "type": "string",
            "nullable": true,
            "example": "US"
          }
        },
        "additionalProperties": false
      },
      "ExternalErrorResponse500ForGetAllSubcriberInGroup": {
        "type": "object",
        "properties": {
          "appCode": {
            "type": "string",
            "nullable": true,
            "description": "API response code (see table above).",
            "example": "gen.1500"
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "API response message (see table above).",
            "example": "Internal Error"
          },
          "isError": {
            "type": "boolean",
            "default": true,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "ExternalErrorResponse403ForGetAllSubcriberInGroup": {
        "type": "object",
        "properties": {
          "appCode": {
            "type": "string",
            "nullable": true,
            "description": "API response code (see table above).",
            "example": "gen.1403"
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "API response message (see table above).",
            "example": "Forbiddden"
          },
          "isError": {
            "type": "boolean",
            "default": true,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "ExternalErrorResponse400ForGetAllSubcriberInGroup": {
        "type": "object",
        "properties": {
          "appCode": {
            "type": "string",
            "nullable": true,
            "description": "API response code (see table above).",
            "example": "grp.1002"
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "API response message (see table above).",
            "example": "Invalid GroupId"
          },
          "isError": {
            "type": "boolean",
            "default": true,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "GroupResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GroupResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "GroupResponseListPagedResponse": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupResponse"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GroupResponseListPagedResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GroupResponseListPagedResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "GroupModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupParam": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "micrositeURL": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "consentCategory": {
            "type": "string",
            "description": "Type of consent granted by the subscriber: *Marketing* or *Non-Marketing*.",
            "example": "Non-Marketing",
            "nullable": true
          },
          "info": {
            "type": "boolean",
            "default": false
          },
          "notificationMobileNos": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "notificationEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "chatEnabled": {
            "type": "boolean",
            "default": false
          },
          "autoReponse": {
            "type": "boolean",
            "default": false
          },
          "autoResponseMessage": {
            "type": "string",
            "nullable": true
          },
          "helpMessage": {
            "type": "string",
            "nullable": true
          },
          "stopMessage": {
            "type": "string",
            "nullable": true
          },
          "optinMessage": {
            "type": "string",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GroupResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "channelId": {
            "type": "string",
            "nullable": true
          },
          "orgunitId": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "keywords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Keywords"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "micrositeURL": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "info": {
            "type": "boolean"
          },
          "consentCategory": {
            "type": "string",
            "description": "Type of consent granted by the subscriber: *Marketing* or *Non-Marketing*.",
            "example": "Non-Marketing",
            "nullable": true
          },
          "notificationMobileNos": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "notificationEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "chatEnabled": {
            "type": "boolean"
          },
          "autoReponse": {
            "type": "boolean"
          },
          "autoResponseMessage": {
            "type": "string",
            "nullable": true
          },
          "helpMessage": {
            "type": "string",
            "nullable": true
          },
          "stopMessage": {
            "type": "string",
            "nullable": true
          },
          "optinMessage": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "communicationCodes": {
            "$ref": "#/components/schemas/CommunicationCodes"
          },
          "sbtOrgunitId": {
            "type": "string",
            "nullable": true
          },
          "notificationSettings": {
            "$ref": "#/components/schemas/NotificationSettings"
          },
          "consentCategoryId": {
            "type": "string",
            "nullable": true
          },
          "subscriptionOrgunitId": {
            "type": "string",
            "nullable": true
          },
          "allowedVbtTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "defaultVbtType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertiesForGetAllSubcriberInGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "description": "Customer-defined variables.",
            "example": "UniqueId"
          },
          "value": {
            "type": "string",
            "nullable": true,
            "description": "Customer-defined variables.",
            "example": "12345"
          }
        },
        "additionalProperties": false
      },
      "RelationForGetAllSubcriberInGroup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "example": "John Doe"
          },
          "relationship": {
            "type": "string",
            "nullable": true,
            "example": "Father"
          }
        },
        "additionalProperties": false
      },
      "TotalGroupCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TotalGroupCountExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TotalGroupCount"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "InboundMessageTypes": {
        "enum": [
          "Stop",
          "Stopall",
          "Help",
          "Keyword",
          "TwoWay"
        ],
        "description": "Type of message sent.",
        "type": "string"
      },
      "InboundMessagesRequestPayload": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "nullable": false,
            "description": "InboundMessages"
          },
          "Payload": {
            "$ref": "#/components/schemas/InboundMessagePayload"
          }
        },
        "additionalProperties": false
      },
      "InboundMessagePayload": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "string",
            "description": "SBT client account ID.",
            "example": "271759e9-ca4f-4835-be61-0fe38d051559",
            "nullable": true
          },
          "BrandId": {
            "type": "string",
            "description": "The identifier of the brand being polled.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "description": "Inbound message content.",
            "example": "BILLINFO",
            "nullable": true
          },
          "OriginalMessage": {
            "type": "string",
            "description": "Text of the original message, if the inbound message is a response to a message sent by the SBT platform.",
            "example": "Hello! This is Weyland-Yutani about your overdue account...",
            "nullable": true
          },
          "Msisdn": {
            "type": "string",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "nullable": true
          },
          "GroupName": {
            "type": "string",
            "description": "Name of the messaging group of which the subscriber is a member.",
            "example": "Account Updates",
            "nullable": true
          },
          "GroupId": {
            "type": "string",
            "description": "The identifier of the group of which the subscriber is a member.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "nullable": true
          },
          "CommunicationCode": {
            "type": "string",
            "description": "Short Code or 10DLC used to send the message.",
            "example": "54321",
            "nullable": true
          },
          "MessageType": {
            "description": "Type of message sent.",
            "enum": [
              "Stop",
              "Stopall",
              "Help",
              "Keyword",
              "CustomKeyword",
              "TwoWay"
            ],
            "example": "TwoWay",
            "type": "string",
            "nullable": true
          },
          "ReceivedTime": {
            "type": "string",
            "description": "Time the inbound message was received.",
            "example": "2023-11-11T15:21:35Z",
            "format": "date-time"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertiesNew"
            },
            "nullable": true
          },
          "ReferenceId": {
            "type": "string",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "nullable": true
          },
          "MessageId": {
            "type": "string",
            "description": "Message tracking ID number from SBT.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "nullable": true
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaFile"
            },
            "nullable": true
          },
          "totalMessageSegments": {
            "type": "integer",
            "description": "Number of message segments used by the message.",
            "example": 2,
            "format": "int32"
          },
          "Intent": {
            "type": "string",
            "description": "Statement of purpose as set by the customer. Only appears if a custom keyword is in use. ",
            "example": "RETURNS LATEST BILL",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InteractionBroadcastMessageRequest": {
        "required": [
          "message",
          "messageType"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Company name or other identifier.",
            "example": "Weyland-Yutani",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Hello! Your account is currently at $426. Contact us for more...",
            "description": "The message text. Mandatory for SMS; not mandatory for MMS."
          },
          "messageType": {
            "$ref": "#/components/schemas/InteractionTypesNew"
          },
          "referenceId": {
            "type": "string",
            "nullable": true,
            "description": "Customer-defined identifier for the message.",
            "example": "192837"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variables"
            },
            "nullable": true
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscribers"
            },
            "nullable": true
          },
          "media": {
            "type": "string",
            "example": "data:[<mediatype>][;base64],<data> *or* https://example.com/image.png",
            "description": "Media file in base64 Data URI format *or* a fully qualified URL."
          }
        },
        "additionalProperties": false
      },
      "InteractionBroadcastMessageResponse": {
        "type": "object",
        "properties": {
          "transactionTicketId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InteractionBroadcastMessageResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InteractionBroadcastMessageResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "InteractionTypesNew": {
        "type": "string",
        "enum": [
          "Unicast",
          "Multicast"
        ],
        "title": "Status indicator",
        "description": "Type of message to be sent. See the API **Description** above for definitions.",
        "x-enumDescriptions": {
          "Unicast": "Send message to a single msisdn",
          "Multicast": "Send message to multiple msisdns"
        }
      },
      "AcceptInvitationRequest": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/AcceptInvitationUserData"
          },
          "emailVerificationToken": {
            "type": "string",
            "nullable": true
          },
          "phoneVerificationToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AcceptInvitationUserData": {
        "required": [
          "password"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "password": {
            "maxLength": 15,
            "minLength": 8,
            "pattern": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).*$",
            "type": "string",
            "format": "password"
          },
          "imageURL": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvitationDetails": {
        "type": "object",
        "properties": {
          "invitation": {
            "$ref": "#/components/schemas/InvitationModel"
          },
          "invitationStatus": {
            "$ref": "#/components/schemas/InvitationResponse"
          }
        },
        "additionalProperties": false
      },
      "InvitationDetailsExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InvitationDetails"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvitationModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "invitationVersion": {
            "$ref": "#/components/schemas/InvitationVersion"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "isAccepted": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isExpired": {
            "type": "boolean",
            "readOnly": true
          },
          "orgUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgUnitModelBasicDetails"
            },
            "nullable": true
          },
          "invitedByUser": {
            "$ref": "#/components/schemas/UserBasicDetails"
          },
          "roleDetail": {
            "$ref": "#/components/schemas/RoleModel"
          }
        },
        "additionalProperties": false
      },
      "InvitationModelExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InvitationModel"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvitationModelListPaginatedResponse": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "filterCount": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvitationModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvitationModelListPaginatedResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InvitationModelListPaginatedResponse"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvitationRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "nullable": true
          },
          "resource": {
            "$ref": "#/components/schemas/InvitationResourcesModel"
          },
          "userRole": {
            "type": "string",
            "nullable": true
          },
          "isResend": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "InvitationResourcesModel": {
        "type": "object",
        "properties": {
          "orgUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgUnitModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvitationResponse": {
        "type": "object",
        "properties": {
          "invitationId": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Internal ID number of the sending user.",
            "example": "08e2ad9b-b5b6-46d1-b12e-b568a64b4419",
            "nullable": true
          },
          "statusCode": {
            "$ref": "#/components/schemas/InvitationStatus"
          },
          "status": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "statusDescription": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "statusDescriptionOverride": {
            "type": "string",
            "nullable": true
          },
          "silentLoginDetails": {
            "$ref": "#/components/schemas/PasswordlessLoginTokenResponse"
          }
        },
        "additionalProperties": false
      },
      "InvitationResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InvitationResponse"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvitationStatus": {
        "enum": [
          "Valid",
          "Invalid",
          "Expired",
          "Deleted",
          "Invited",
          "NotInvited",
          "AlreadyInvited",
          "AlreadyAcceptedThisInvite",
          "AlreadyAcceptedAnotherInvite",
          "Accepted"
        ],
        "type": "string"
      },
      "InvitationVersion": {
        "enum": [
          "v1"
        ],
        "type": "string"
      },
      "InvoiceDetails": {
        "type": "object",
        "properties": {
          "mbtAccountID": {
            "type": "string",
            "nullable": true
          },
          "invoiceId": {
            "type": "string",
            "nullable": true
          },
          "invoiceType": {
            "type": "string",
            "nullable": true
          },
          "invoiceDate": {
            "type": "string",
            "nullable": true
          },
          "invoiceAmount": {
            "type": "string",
            "nullable": true
          },
          "invoiceStatus": {
            "type": "string",
            "nullable": true
          },
          "paymentFailureReason": {
            "type": "string",
            "nullable": true
          },
          "planName": {
            "type": "string",
            "nullable": true
          },
          "invoicePDFLink": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "invoiceList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceDetails"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceHistoryExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/InvoiceHistory"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "KeywordRequest": {
        "required": [
          "name",
          "userId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new keyword itself.",
            "example": "HOURS",
            "nullable": true
          },
          "onContact": {
            "type": "string",
            "nullable": true
          },
          "notificationEmails": {
            "type": "array",
            "description": "Email addresses which will be sent alerts that the Keyword is received from a subscriber.",
            "example": "name@example.com",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "notificationMobileNos": {
            "type": "array",
            "description": "Phone numbers which will be sent alerts that the Keyword was received from a subscriber.",
            "example": "12345678902",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Internal ID number of the sending user.",
            "example": "08e2ad9b-b5b6-46d1-b12e-b568a64b4419",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Keyword": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The Keyword itself",
            "example": "hello",
            "nullable": true
          },
          "response": {
            "type": "string",
            "description": "The Keyword's automatic response (if defined).",
            "example": "Hello back! This is Weyland-Yutani!",
            "nullable": true
          },
          "notificationEmails": {
            "type": "array",
            "example": "name@example.com",
            "description": "Email addresses which will be sent alerts that the Keyword is received from a subscriber.",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "notificationMobileNos": {
            "type": "array",
            "description": "Phone numbers which will be sent alerts that the Keyword was received from a subscriber.",
            "example": "12345678902",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Date and time on which the keyword was created.",
            "example": "2023-11-11T15:02:11Z",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "KeywordListPagedResponse": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "description": "Maximum number of pages in the query return.",
            "example": 5,
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "description": "Maximum number of items on each returned page.",
            "example": 50,
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "description": "Number of pages in the query return.",
            "example": 3,
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of items in the query return.",
            "example": 117,
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Keyword"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KeywordListPagedResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/KeywordListPagedResponse"
          },
          "appCode": {
            "type": "string",
            "description": "API response code (see table above).",
            "example": "gen.1200",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "API response message (see table above).",
            "example": "Request Successful",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "description": "If no error, *false*. If error, *true*.",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "Keywords": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "onContact": {
            "type": "string",
            "nullable": true
          },
          "notificationEmails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "notificationMobileNos": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "orgunitId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Keywordsparam": {
        "type": "object",
        "properties": {
          "keywords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Keywords"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateKeywordExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "nullable": true,
            "description": "Data"
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "MediaDetails": {
        "type": "object",
        "properties": {
          "mediaPath": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MediaInfo": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "description": "Name of the MMS file.",
            "example": "image01",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "description": "MMS file type extension.",
            "example": "",
            "nullable": true
          },
          "fileSaveId": {
            "type": "string",
            "description": "",
            "example": "",
            "nullable": true
          },
          "mimetype": {
            "type": "string",
            "description": "",
            "example": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MediaFile": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Automatically generated file ID number.",
            "example": "04ffee3d-5d9b-4f66-8398-2b1e86a5bbd9",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Name of the file received.",
            "example": "DEFAULT_012825094142193879.jpeg",
            "nullable": true
          }
        }
      },
      "MediaDetail": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          },
          "fileName": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "mimetype": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "description": "Message tracking ID number from SBT.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MessageResponseODMPIN": {
        "type": "object",
        "properties": {
          "validation": {
            "type": "boolean",
            "default": true
          },
          "msisdn": {
            "type": "string",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902"
          }
        },
        "additionalProperties": false
      },
      "MessageResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "MessageType": {
        "enum": [
          "Both",
          "Inbound",
          "Outbound"
        ],
        "description": "Type of message sent.",
        "type": "string"
      },
      "ODMpayload": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "example": "1",
            "description": "Identifying number of the template.",
            "nullable": false
          },
          "templateName": {
            "type": "string",
            "example": "Account Status",
            "description": "Only considered when *templateId* is not provided.",
            "nullable": false
          },
          "referenceId": {
            "type": "string",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "nullable": true
          },
          "msisdn": {
            "type": "string",
            "nullable": true,
            "example": "12345678902",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902)."
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variables"
            },
            "nullable": true
          }
        }
      },
      "MessageStatusRequestPayload": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "nullable": false,
            "description": "MessageStatus"
          },
          "Payload": {
            "$ref": "#/components/schemas/MessageStatusPayload"
          }
        },
        "additionalProperties": false
      },
      "MessageStatusPayload": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "string",
            "description": "SBT customer account ID.",
            "example": "271759e9-ca4f-4835-be61-0fe38d051559",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "description": "Message content.",
            "example": "Hello! Your account is currently at $426. Contact us for more...",
            "nullable": true
          },
          "Msisdn": {
            "type": "string",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "nullable": true
          },
          "GroupName": {
            "type": "string",
            "description": "Name of the messaging group from which the message was sent.",
            "example": "Account Updates",
            "nullable": true
          },
          "GroupId": {
            "type": "string",
            "description": "The identifier of the group from which the message was sent.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "nullable": true
          },
          "BrandId": {
            "type": "string",
            "description": "The identifier of the brand from which the message was sent.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "nullable": true
          },
          "CommunicationCode": {
            "type": "string",
            "description": "Short Code or 10DLC used to send the message.",
            "example": "54321",
            "nullable": true
          },
          "DeliveredTime": {
            "type": "string",
            "description": "Time the message was delivered to the handset.",
            "example": "2023-11-11T15:01:11Z",
            "format": "date-time"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertiesNew"
            },
            "nullable": true
          },
          "StatusCode": {
            "type": "string",
            "description": "Status code for the message. See the table below for codes and definitions.",
            "example": "100",
            "nullable": true
          },
          "StatusCodeDescription": {
            "type": "string",
            "description": "Status code definition for the message. See the table below for codes and definitions.",
            "example": "Message was successfully delivered",
            "nullable": true
          },
          "MessageId": {
            "type": "string",
            "description": "Message tracking ID number from SBT.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "nullable": true
          },
          "ReferenceId": {
            "type": "string",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "nullable": true
          },
          "Channel": {
            "type": "string",
            "description": "Message type (SMS, MMS, or RCS).",
            "example": "SMS",
            "nullable": true
          },
          "TotalMessageSegments": {
            "type": "integer",
            "description": "Number of message segments used by the message.",
            "example": 2,
            "nullable": true
          },
          "MessageType": {
            "type": "string",
            "enum": [
              "TwoWay",
              "Unicast",
              "Vbt",
              "Multicast"
            ],
            "example": "TwoWay",
            "description": "Type of message sent.",
            "nullable": true
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaFile"
            },
            "nullable": true
          },
          "templateId": {
            "type": "integer",
            "example": 1,
            "description": "Identifying number of the template.",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "example": "jdoe",
            "description": "Name of the SBT platform user who sent the message.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateMfeAppRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "allowedOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateMfeAppResponse": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateMfeAppResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CreateMfeAppResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "MfeApp": {
        "type": "object",
        "properties": {
          "appId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "allowedOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MfeAppIEnumerableExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MfeApp"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "UpdateMfeAppRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "allowedOrigins": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotificationSettings": {
        "type": "object",
        "properties": {
          "emailNotificationEnabled": {
            "type": "boolean"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "smsNotificationEnabled": {
            "type": "boolean"
          },
          "mobileNos": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "description": "Mobile number with dialing code"
          },
          "webHook": {
            "$ref": "#/components/schemas/WebHook"
          }
        },
        "additionalProperties": false
      },
      "NotificationSettingsExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/NotificationSettings"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "CreateOAuthProviderRequest": {
        "required": [
          "clientId",
          "clientSecret",
          "name",
          "provider",
          "providerGroup"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "providerGroup": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateOAuthProviderRequestExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CreateOAuthProviderRequest"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "OAuthProvider": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "providerGroup": {
            "type": "string",
            "nullable": true
          },
          "provider": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "clientSecret": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OAuthProviderIEnumerableExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OAuthProvider"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "UpdateOAuthProviderRequest": {
        "required": [
          "clientId",
          "clientSecret",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateOAuthProviderStatusRequest": {
        "required": [
          "active"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ObjectExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "nullable": true
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ObjectExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ObjectGeneralResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ObjectGeneralResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ObjectGeneralResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ObjectId": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "machine": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "deprecated": true
          },
          "pid": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "deprecated": true
          },
          "increment": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "deprecated": true
          },
          "creationTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrgunitIdResponse": {
        "type": "object",
        "properties": {
          "orgunitId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrgunitIdResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrgunitIdResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "OrgUnitModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrgUnitModelBasicDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrgunitParam": {
        "required": [
          "email",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "contactNo": {
            "type": "string",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "groupQuota": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrgunitPatch": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "tenantKey": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "contactNo": {
            "type": "string",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "groupQuota": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "shortenEnabled": {
            "type": "boolean",
            "default": true
          },
          "shortenUrlLength": {
            "type": "integer",
            "format": "int32",
            "default": 15
          },
          "urllist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sbtOrgunitId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrgunitResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "tenantKey": {
            "type": "integer",
            "format": "int32"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "prefixCode": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "contactNo": {
            "type": "string",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "groupQuota": {
            "type": "integer",
            "format": "int32"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true
          },
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "defaultBrand": {
            "type": "boolean"
          },
          "shortenEnabled": {
            "type": "boolean"
          },
          "shortenUrlLength": {
            "type": "integer",
            "format": "int32"
          },
          "urllist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "communicationCodes": {
            "$ref": "#/components/schemas/CommunicationCodes"
          },
          "sbtOrgunitId": {
            "type": "string",
            "nullable": true
          },
          "childGroups": {
            "$ref": "#/components/schemas/GroupResponse"
          }
        },
        "additionalProperties": false
      },
      "OrgunitResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrgunitResponse"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrgunitResponseListPaginatedResponse": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "filterCount": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgunitResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrgunitResponseListPaginatedResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OrgunitResponseListPaginatedResponse"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Address": {
        "type": "object",
        "properties": {
          "address1": {
            "type": "string",
            "example": "7910 Noemie Knoll",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "example": "Apt 101",
            "nullable": true
          },
          "city": {
            "type": "string",
            "example": "Madilynland",
            "nullable": true
          },
          "state": {
            "type": "string",
            "example": "CO",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "example": "99582",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "example": "US",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiRoleResponseIEnumerableExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiRoleResponse"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "BooleanExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "boolean"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CallbackUrlSettings": {
        "type": "object",
        "properties": {
          "callBackUrl": {
            "type": "string",
            "nullable": true
          },
          "authenticationType": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "tokenAuthority": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "clientSecret": {
            "type": "string",
            "nullable": true
          },
          "clientScope": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Campuses": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Carrier": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The wireless provider ID for the subscriber's carrier.",
            "example": "383",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The wireless provider name for the subscriber's carrier.",
            "example": "AT&T Wireless Inc.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CartItems": {
        "type": "object",
        "properties": {
          "app": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "priceOption": {
            "$ref": "#/components/schemas/PriceOption"
          },
          "finalAmount": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CommunityAccessType": {
        "enum": [
          "PlanDefault",
          "ForceEnable",
          "ForceDisable"
        ],
        "type": "string"
      },
      "ExternalApiResponse`1": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/T"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "ExternalConsentContext": {
        "type": "object",
        "properties": {
          "externalConsentProvided": {
            "type": "string",
            "nullable": true
          },
          "messageContext": {
            "type": "string",
            "nullable": true
          },
          "consentRecordReference": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalErrorResponse": {
        "type": "object",
        "properties": {
          "appCode": {
            "type": "string",
            "nullable": true,
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": true,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "Feature": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "present": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ImageUploadResponse": {
        "type": "object",
        "properties": {
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageUploadResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ImageUploadResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "Includes": {
        "enum": [
          "Carrier"
        ],
        "type": "string"
      },
      "Preferences": {
        "type": "object",
        "properties": {
          "helpEnabled": {
            "type": "boolean",
            "default": true
          },
          "themes": {
            "$ref": "#/components/schemas/Themes"
          }
        },
        "additionalProperties": false
      },
      "PrivatePlan": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "privatePlanCodes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Properties": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "example": "UniqueID",
            "description": "Customer-defined variable. Typically used for customer ID numbers, dollar amounts, etc."
          },
          "value": {
            "type": "string",
            "nullable": true,
            "example": "A1B2C3",
            "description": "Variable data. As shown here, a unique customer/subscriber ID."
          }
        },
        "additionalProperties": false
      },
      "PropertiesNew": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "example": "UniqueID",
            "description": "Customer-defined variable. Typically used for customer ID numbers, dollar amounts, etc."
          },
          "value": {
            "type": "string",
            "nullable": true,
            "example": "A1B2C3",
            "description": "Variable data. As shown here, a unique customer/subscriber ID."
          }
        },
        "additionalProperties": false
      },
      "RegisterCompany": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "leadId": {
            "type": "string",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "webAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Relation": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Mike Doe",
            "nullable": true
          },
          "relationship": {
            "type": "string",
            "example": "Brother",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringArrayExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "StringExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "nullable": true
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "T": {
        "type": "object",
        "additionalProperties": false
      },
      "Themes": {
        "enum": [
          "Light",
          "Dark"
        ],
        "type": "string"
      },
      "Variables": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "example": "BankName",
            "description": "Customer-defined variable. Typically used for customer ID numbers, dollar amounts, etc."
          },
          "value": {
            "type": "string",
            "nullable": true,
            "example": "ABC Bank",
            "description": "Variable data. As shown here, a unique customer name."
          }
        },
        "additionalProperties": false
      },
      "WebHook": {
        "type": "object",
        "properties": {
          "callbackUrlEnabled": {
            "type": "boolean"
          },
          "statusUrlEnabled": {
            "type": "boolean"
          },
          "callbackUrlSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallbackUrlSettings"
            },
            "nullable": true
          },
          "statusUrlSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusUrlSettings"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OutboundSummaryCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "OutboundSummaryCountExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OutboundSummaryCount"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "OutboundMessageTypes": {
        "enum": [
          "TwoWay",
          "OptInResponse",
          "KeywordResponse",
          "AutoResponse",
          "StopResponse",
          "HelpResponse",
          "StopAllResponse",
          "Notification",
          "Unicast",
          "Vbt",
          "Multicast",
          "Deact",
          "BroadcastDeviceDelivery",
          "NonSubscriberAutoResponse",
          "NonSubscriberHelpResponse",
          "NonSubscriberStopResponse",
          "NonSubscriberStopAllResponse",
          "OnDemandMessage"
        ],
        "type": "string"
      },
      "PhoneNumberResponse": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "nullable": true
          },
          "carrierCode": {
            "type": "string",
            "nullable": true
          },
          "carrierName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberResponseDetails": {
        "type": "object",
        "properties": {
          "msisdn": {
            "type": "string",
            "example": "12345678902",
            "description": "Subscribers' phone numbers.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "example": "Mobile",
            "description": "Type of phone: Mobile, Landline, or Invalid.",
            "nullable": true
          },
          "carrier": {
            "$ref": "#/components/schemas/Carrier"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberResponseDetailsListExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberResponseDetails"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "PhoneVerificationRequestParam": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "otp": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlanData": {
        "type": "object",
        "properties": {
          "cartItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CartItems"
            },
            "nullable": true
          },
          "methodofpaymentDetails": {
            "$ref": "#/components/schemas/MethodofpaymentDetails"
          }
        },
        "additionalProperties": false
      },
      "PlanMergedData": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductNew"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlanMergedDataExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PlanMergedData"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceOption": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "string",
            "nullable": true
          },
          "discount": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceoptionNew": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "display_text": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "string",
            "nullable": true
          },
          "discount": {
            "nullable": true
          },
          "recommended": {
            "type": "boolean"
          },
          "defaultOption": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ProductNew": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "entitlement_capacity": {
            "type": "string",
            "nullable": true
          },
          "entitlement_overageCost": {
            "type": "string",
            "nullable": true
          },
          "entitlement_short_code_type": {
            "type": "string",
            "nullable": true
          },
          "entitlement_long_code_type": {
            "type": "string",
            "nullable": true
          },
          "entitlement_community_access": {
            "type": "boolean"
          },
          "priceOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceoptionNew"
            },
            "nullable": true
          },
          "private": {
            "type": "boolean"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductTicker": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "productType": {
            "type": "string",
            "nullable": true
          },
          "initiatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AddScheduleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddScheduleResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AddScheduleResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ScheduleMessageRequest": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Company name or other identifier.",
            "example": "Weyland-Yutani",
            "nullable": true
          },
          "message": {
            "type": "string",
            "example": "Hello! Your account is currently at $426. Contact us for more...",
            "description": "The message text. Mandatory for SMS; not mandatory for MMS.",
            "nullable": true
          },
          "ScheduleDateTime": {
            "type": "string",
            "example": "2023-11-11T15:00:00Z",
            "description": "**MUST BE IN UTC FORMAT.** See *Request samples* at right. Date and time the message will be sent.",
            "format": "date-time"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscribers"
            },
            "nullable": true
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variables"
            },
            "nullable": true
          },
          "referenceId": {
            "type": "string",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "nullable": true
          },
          "media": {
            "type": "string",
            "nullable": true,
            "example": "data:[<mediatype>][;base64],<data> *or* https://example.com/image.png",
            "description": "Media file in base64 Data URI format *or* a fully qualified URL."
          }
        },
        "additionalProperties": false
      },
      "InteractionBroadcastScheduleMessageRequest": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "subscriberNumber": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "scheduleDate": {
            "type": "string",
            "nullable": true
          },
          "scheduleTime": {
            "type": "string",
            "nullable": true
          },
          "timeZoneId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateScheduleMessageResponseDetails": {
        "type": "object",
        "properties": {
          "ShortUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateScheduleMessageExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "items": {
              "$ref": "#/components/schemas/CreateScheduleMessageResponseDetails"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "ScheduleNewResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "scheduleDate": {
            "type": "string",
            "format": "date-time"
          },
          "scheduleTime": {
            "type": "string",
            "nullable": true
          },
          "timeZoneId": {
            "type": "string",
            "nullable": true
          },
          "scheduleDateUTC": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "externalReferenceId": {
            "type": "string",
            "nullable": true
          },
          "orgunitId": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "parentOrgUnitId": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Internal ID number of the sending user.",
            "example": "08e2ad9b-b5b6-46d1-b12e-b568a64b4419",
            "nullable": true
          },
          "subscriberNumber": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "scheduleType": {
            "type": "string",
            "nullable": true
          },
          "userDetails": {
            "$ref": "#/components/schemas/UserDetailsNew"
          }
        },
        "additionalProperties": false
      },
      "ScheduleNewResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ScheduleNewResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ScheduleResponseNew": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "scheduleDate": {
            "type": "string",
            "nullable": true
          },
          "scheduleTime": {
            "type": "string",
            "nullable": true
          },
          "timeZoneId": {
            "type": "string",
            "nullable": true
          },
          "scheduleDateUTC": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "externalReferenceId": {
            "type": "string",
            "nullable": true
          },
          "orgunitId": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "parentOrgUnitId": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Internal ID number of the sending user.",
            "example": "08e2ad9b-b5b6-46d1-b12e-b568a64b4419",
            "nullable": true
          },
          "subscriberNumber": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduleResponseNewListPaginatedResponse": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "filterCount": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScheduleResponseNew"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ScheduleResponseNewListPaginatedResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ScheduleResponseNewListPaginatedResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "TotalScheduleMessageCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TotalScheduleMessageCountExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TotalScheduleMessageCount"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "SentMessageReportResponse": {
        "type": "object",
        "properties": {
          "trackId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SentMessageReportResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SentMessageReportResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "SentMessageReportResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SentMessageReportResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "CreateSmartclickExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSmartclickResponseDetails"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "CreateSmartclickResponseDetails": {
        "type": "object",
        "properties": {
          "ShortUrl": {
            "type": "string",
            "description": "The SmartURL created by the API call.",
            "example": "https://s.s-url.pro/bDHpov",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SmartUrlClickEventRequestPayload": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "nullable": false,
            "description": "SmartUrlClick"
          },
          "Payload": {
            "$ref": "#/components/schemas/SmartUrlClickPayload"
          }
        },
        "additionalProperties": false
      },
      "SmartUrlClickPayload": {
        "type": "object",
        "properties": {
          "Domain": {
            "type": "string",
            "nullable": true
          },
          "LongUrl": {
            "type": "string",
            "description": "The long URL linked by the SmartURL.",
            "example": "https//:example.com/page.htm",
            "nullable": true
          },
          "SmartUrl": {
            "type": "string",
            "description": "The SmartURL itself.",
            "example": "https://s.s-url.pro/bDHpov",
            "nullable": true
          },
          "BrandId": {
            "description": "The identifier of the brand being polled.",
            "example": "b85c02b4-c3de-4c7f-8717-97aa551652bb",
            "type": "string"
          },
          "AccountId": {
            "description": "SBT client account ID.",
            "example": "271759e9-ca4f-4835-be61-0fe38d051559",
            "type": "string"
          },
          "ClickedDateTime": {
            "type": "string",
            "description": "UTC time the subscriber clicked the SmartURL.",
            "example": "2024-05-16T16:12:41.18Z",
            "format": "date-time"
          },
          "RemoteIpAddress": {
            "type": "string",
            "nullable": true
          },
          "Referer": {
            "type": "string",
            "nullable": true
          },
          "Origin": {
            "type": "string",
            "nullable": true
          },
          "IsPreviewClick": {
            "type": "boolean",
            "default": false
          },
          "IPAddressData": {
            "type": "string",
            "nullable": true
          },
          "UserAgentDetails": {
            "type": "string",
            "nullable": true
          },
          "UserAgentFamily": {
            "type": "string",
            "nullable": true
          },
          "UserAgentMajor": {
            "type": "string",
            "nullable": true
          },
          "UserAgentMinor": {
            "type": "string",
            "nullable": true
          },
          "OSFamily": {
            "type": "string",
            "nullable": true
          },
          "OSMajor": {
            "type": "string",
            "nullable": true
          },
          "OSMinor": {
            "type": "string",
            "nullable": true
          },
          "DeviceFamily": {
            "type": "string",
            "nullable": true
          },
          "AdditionalInfo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SmartUrlsReportResponsePaginatedResponse2": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total number of items in the query return.",
            "example": 316,
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "description": "Number of pages in the query return.",
            "example": 11,
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SmartUrlsReportResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SmartUrlsReportResponsePaginatedResponse2ExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SmartUrlsReportResponsePaginatedResponse2"
          },
          "appCode": {
            "type": "string",
            "example": "gen.1200",
            "description": "API response code (see table above).",
            "nullable": true
          },
          "message": {
            "type": "string",
            "example": "Request successful",
            "description": "API response message (see table above).",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "description": "If no error, *false*. If error, *true*.",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "SmartUrlsReportResponse": {
        "type": "object",
        "properties": {
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "description": "Date the SmartURL was created, in UTC.",
            "example": "2023-08-05T016:03:40.23Z",
            "nullable": true
          },
          "createdOnLocal": {
            "type": "string",
            "format": "date-time",
            "description": "Date the SmartURL was created, with the *TimeZoneOffset* included.",
            "example": "2023-08-05T11:03:40.23Z",
            "nullable": true
          },
          "longUrl": {
            "type": "string",
            "description": "The original long URL.",
            "example": "https://example.com/directory/subdirectory/page.htm",
            "nullable": true
          },
          "shortUrl": {
            "type": "string",
            "description": "The SmartURL itself.",
            "example": "https://s.s-url.pro/bDHpov",
            "nullable": true
          },
          "isCustomSuffix": {
            "description": "Yes/No if the SmartURL has a custom suffix.",
            "example": "true *or* false",
            "type": "boolean"
          },
          "clickCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalClicks": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "StatusUrlSettings": {
        "type": "object",
        "properties": {
          "statusUrl": {
            "type": "string",
            "nullable": true
          },
          "authenticationType": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "tokenAuthority": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "string",
            "nullable": true
          },
          "clientSecret": {
            "type": "string",
            "nullable": true
          },
          "clientScope": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriberExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Subscriber"
          },
          "appCode": {
            "type": "string",
            "example": "Request successful.",
            "nullable": true,
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "example": "gen.1200",
            "nullable": true,
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "SubscriberStatusResponse": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "nullable": true,
            "description": "Opt-in verification Message tracking ID number from SBT.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5"
          },
          "msisdn": {
            "type": "string",
            "nullable": true,
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902"
          },
          "pin": {
            "type": "string",
            "nullable": true,
            "description": "PIN sent to the subscriber.",
            "example": "210622"
          }
        },
        "additionalProperties": false
      },
      "SubscriberStatusVerificationResponse": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "nullable": true,
            "description": "Opt-in verification Message tracking ID number from SBT."
          },
          "msisdn": {
            "type": "string",
            "nullable": true,
            "example": "12345678902",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902)."
          }
        },
        "additionalProperties": false
      },
      "SubscriberStatusVerificationResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubscriberStatusVerificationResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "SubscriberStatusResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubscriberStatusResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "SubscriberStatusResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubscriberStatusResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "g.2201",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Created successfully",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "BrandSubscriberStatus": {
        "type": "object",
        "properties": {
          "consentCategory": {
            "type": "string",
            "description": "Type of consent granted by the subscriber: *Marketing* or *Non-Marketing*.",
            "example": "Non-Marketing",
            "nullable": true
          },
          "groupIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The groups of which the subscriber is a member.",
              "example": "f0618891-6561-43fb-ae67-c84f5448cea7, 425fa869-6116-4e0c-af1c-0c764e78bc70"
            },
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true,
            "description": "Subscription status: *Active*, *InActive*, *Not a Subscriber*, or *UnderVerification*."
          },
          "msisdn": {
            "type": "string",
            "nullable": true,
            "example": "12345678902",
            "description": "Mobile number with dialing code"
          },
          "carrierName": {
            "type": "string",
            "nullable": true,
            "description": "The wireless provider name for the subscriber's carrier",
            "example": "AT&T Wireless Inc."
          },
          "carrierId": {
            "type": "string",
            "nullable": true,
            "description": "The wireless provider ID for the subscriber's carrier",
            "example": "383"
          },
          "firstOptInDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-08-05T05:03:40.23Z",
            "description": "First Date the subscriber was opted into messaging."
          },
          "lastOptinDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-03-15T05:03:40.23Z",
            "description": "Last Date the subscriber was opted into messaging."
          },
          "lastOptoutDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-04-21T05:03:40.23Z",
            "description": "Date the subscriber was opted out of messaging."
          },
          "optinType": {
            "type": "string",
            "nullable": true,
            "example": "API",
            "description": "Method by which the susbcriber was opted into messaging."
          },
          "optoutType": {
            "type": "string",
            "nullable": true,
            "description": "Method by which the susbcriber was opted out of messaging. Will show the keyword if that method was used.",
            "example": "STOPALL"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Properties"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchSubscribersResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "mobileNo": {
            "type": "string",
            "nullable": true,
            "description": "Mobile number with dialing code"
          },
          "landLineNo": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            },
            "nullable": true
          },
          "mobileCountryCode": {
            "type": "string",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Properties"
            },
            "nullable": true
          },
          "uploadStatus": {
            "type": "string",
            "nullable": true
          },
          "isNumberValid": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchSubscribersResponseListPagedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "pageNumber": {
                "type": "integer",
                "description": "Maximum number of pages in the query return.",
                "example": 5,
                "format": "int32"
              },
              "pageSize": {
                "type": "integer",
                "description": "Maximum number of items on each returned page.",
                "example": 50,
                "format": "int32"
              },
              "totalPages": {
                "type": "integer",
                "description": "Number of pages in the query return.",
                "example": 3,
                "format": "int32"
              },
              "totalCount": {
                "type": "integer",
                "description": "Total number of items in the query return.",
                "example": 117,
                "format": "int64"
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DeactEventReportAccount"
                },
                "nullable": true,
                "readOnly": true
              }
            }
          },
          "appCode": {
            "type": "string",
            "example": "gen.1200",
            "description": "API response code (see table above).",
            "nullable": true
          },
          "message": {
            "type": "string",
            "example": "Request successful",
            "description": "API response message (see table above).",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "description": "If no error, *false*. If error, *true*.",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "GetSubscriberResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "msisdn": {
            "type": "string",
            "nullable": true,
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902)."
          },
          "landLineNo": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            },
            "nullable": true
          },
          "mobileCountryCode": {
            "type": "string",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Properties"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetSubscriberResponseListPagedResponse": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetSubscriberResponse"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetSubscriberResponseListPagedResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GetSubscriberResponseListPagedResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "SubscriberParam": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "msisdn": {
            "type": "string",
            "nullable": true,
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902)."
          },
          "landLineNo": {
            "type": "string",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "gender": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            },
            "nullable": true
          },
          "mobileCountryCode": {
            "type": "string",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Properties"
            },
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriberRequest": {
        "required": [
          "msisdn"
        ],
        "type": "object",
        "properties": {
          "msisdn": {
            "type": "string",
            "nullable": true,
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902"
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "example": "Mark",
            "nullable": true
          },
          "landLineNo": {
            "type": "string",
            "example": "19876543209",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true,
            "description": "Subscriber image URL, if available.",
            "example": "https://example.com/subscribers/image.jpg"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "name@example.com"
          },
          "gender": {
            "type": "string",
            "nullable": true,
            "example": "Male"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "example": "1990-11-11T00:00:00Z",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            },
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Properties"
            },
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "example": 33,
            "nullable": true
          },
          "referenceId": {
            "type": "string",
            "description": "Customer-defined identifier for the subscriber.",
            "example": "192837",
            "nullable": true
          },
          "verification": {
            "$ref": "#/components/schemas/Verification"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variables"
            },
            "nullable": true
          },
          "media": {
            "type": "string",
            "nullable": true,
            "example": "data:[<mediatype>][;base64],<data> *or* https://example.com/image.png",
            "description": "Media file in base64 Data URI format *or* a fully qualified URL."
          }
        },
        "additionalProperties": false
      },
      "SubscriberResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriberResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubscriberResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "SubscriberResponseInbox": {
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "msisdn": {
            "type": "string",
            "nullable": true,
            "example": "12345678902",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902)."
          }
        },
        "additionalProperties": false
      },
      "Subscribers": {
        "required": [
          "msisdn"
        ],
        "type": "object",
        "properties": {
          "msisdn": {
            "type": "string",
            "nullable": true,
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902)."
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variables"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriberStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "nullable": true,
            "description": "Subscription status: *Active*, *InActive*, *Not a Subscriber*, or *UnderVerification*.",
            "example": "Active"
          },
          "msisdn": {
            "type": "string",
            "nullable": true,
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902"
          },
          "carrierName": {
            "type": "string",
            "nullable": true,
            "description": "The wireless provider name for the subscriber's carrier.",
            "example": "AT&T Wireless Inc."
          },
          "carrierId": {
            "type": "string",
            "nullable": true,
            "description": "The wireless provider ID for the subscriber's carrier.",
            "example": "383"
          },
          "firstOptInDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2023-08-05T05:03:40.23Z",
            "description": "First Date the subscriber was opted into messaging."
          },
          "lastOptinDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-03-15T05:03:40.23Z",
            "description": "Last Date the subscriber was opted into messaging."
          },
          "lastOptoutDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-04-21T05:03:40.23Z",
            "description": "Date the subscriber was opted out of messaging."
          },
          "optinType": {
            "type": "string",
            "nullable": true,
            "example": "API",
            "description": "Method by which the susbcriber was opted into messaging."
          },
          "optoutType": {
            "type": "string",
            "nullable": true,
            "description": "Method by which the susbcriber was opted out of messaging. Will show the keyword if that method was used.",
            "example": "STOPALL"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Properties"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriberStatusExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SubscriberStatus"
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "description": "API response code (see table above).",
            "example": "gen.1200"
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "API response message (see table above).",
            "example": "Request successful"
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "Subscriber": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "description": "Maximum number of pages in the query return.",
            "nullable": false,
            "example": 1
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of items on each returned page.",
            "nullable": false,
            "example": 25
          },
          "totalPages": {
            "type": "integer",
            "description": "Number of pages in the query return.",
            "nullable": false,
            "example": 1
          },
          "totalCount": {
            "type": "integer",
            "description": "Total number of items in the query return.",
            "nullable": false,
            "example": 10
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberData"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SubscriberData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "description": "Internal subscriber ID number (if set by the SBT customer).",
            "example": "662371297a3c0cd03bd379af"
          },
          "firstName": {
            "type": "string",
            "nullable": true,
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "example": "Doe"
          },
          "middleName": {
            "type": "string",
            "nullable": true,
            "example": "J"
          },
          "msisdn": {
            "type": "string",
            "nullable": true,
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902"
          },
          "status": {
            "type": "string",
            "nullable": true,
            "description": "Subscription status: *Active*, *InActive*, *Not a Subscriber*, or *UnderVerification*.",
            "example": "Active"
          },
          "landLineNo": {
            "type": "string",
            "nullable": true,
            "example": "1234567890"
          },
          "imageUrl": {
            "type": "string",
            "nullable": true,
            "example": "https://example.com/image.jpg"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "name@example.com"
          },
          "gender": {
            "type": "string",
            "nullable": true,
            "example": "Male"
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": "28"
          },
          "address": {
            "$ref": "#/components/schemas/AddressForGetAllSubcriberInGroup"
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelationForGetAllSubcriberInGroup"
            },
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertiesForGetAllSubcriberInGroup"
            },
            "nullable": true
          },
          "carrierName": {
            "type": "string",
            "nullable": true,
            "description": "The wireless provider name for the subscriber's carrier",
            "example": "AT&T Wireless Inc."
          },
          "carrierId": {
            "type": "string",
            "nullable": true,
            "description": "The wireless provider ID for the subscriber's carrier",
            "example": "383"
          },
          "firstOptInDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "First Date the subscriber was opted into messaging.",
            "example": "2024-04-20T07:39:21.18Z"
          },
          "lastOptinDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-03-15T05:03:40.23Z",
            "description": "Last Date the subscriber was opted into messaging."
          },
          "lastOptoutDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": " Date of the subscriber was opted out of the company",
            "example": "2024-07-01T09:11:23.73Z"
          },
          "optinType": {
            "type": "string",
            "nullable": true,
            "example": "API",
            "description": "Method by which the susbcriber was opted into messaging."
          },
          "optoutType": {
            "type": "string",
            "nullable": true,
            "description": "Method by which the susbcriber was opted out of messaging. Will show the keyword if that method was used.",
            "example": "STOPALL"
          }
        },
        "additionalProperties": false
      },
      "SubscriberCustomParams": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchSubscribersResponseListPagedResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BatchSubscribersResponseListPagedResponse"
          },
          "appCode": {
            "type": "string",
            "example": "gen.1200",
            "description": "API response code (see table above).",
            "nullable": true
          },
          "message": {
            "type": "string",
            "example": "Request successful",
            "description": "API response message (see table above).",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "description": "If no error, *false*. If error, *true*.",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ReactivateSubscriber": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "example": "Mark",
            "nullable": true
          },
          "landLineNo": {
            "type": "string",
            "example": "19876543209",
            "nullable": true
          },
          "imageUrl": {
            "type": "string",
            "nullable": true,
            "description": "Subscriber image URL, if available.",
            "example": "https://example.com/subscribers/image.jpg"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "example": "name@example.com"
          },
          "gender": {
            "type": "string",
            "nullable": true,
            "example": "Male"
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "example": "1990-11-11T00:00:00Z",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "relations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relation"
            },
            "nullable": true
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Properties"
            },
            "nullable": true
          },
          "age": {
            "type": "integer",
            "format": "int32",
            "example": 33,
            "nullable": true
          },
          "referenceId": {
            "type": "string",
            "description": "Customer-defined identifier for the subscriber.",
            "example": "192837",
            "nullable": true
          },
          "verification": {
            "$ref": "#/components/schemas/Verification"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variables"
            },
            "nullable": true
          },
          "media": {
            "type": "string",
            "nullable": true,
            "example": "data:[<mediatype>][;base64],<data> *or* https://example.com/image.png",
            "description": "Media file in base64 Data URI format *or* a fully qualified URL."
          }
        },
        "additionalProperties": false
      },
      "DeleteSubscriberSilent": {
        "type": "object",
        "properties": {
          "silent": {
            "type": "boolean",
            "example": false,
            "description": "The default for the *silent* parameter is *false*. If no payload file is submitted, the value will default to *false*."
          }
        },
        "additionalProperties": false
      },
      "ConfirmMultiSubscriptionVerificationResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfirmMultiSubscriptionVerificationResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ConfirmMultiSubscriptionVerificationResponse"
          },
          "appCode": {
            "type": "string",
            "description": "API response code (see table above).",
            "example": "g.2201",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "API response message (see table above).",
            "example": "Created successfully",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "description": "If no error, *false*. If error, *true*.",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "Tags": {
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "orgUnitId": {
            "type": "string",
            "nullable": true
          },
          "tagName": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagsPaginatedResponse2": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tags"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TagsPaginatedResponse2ExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TagsPaginatedResponse2"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetTemplateListresponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The template's identifier.",
            "example": "021",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name given to the template.",
            "example": "Account Status",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The template's message content.",
            "example": "Hello {FirstName}, your account balance: ${ActBal}.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "",
            "example": "",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "",
            "example": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetTemplateListExternalresponse": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "example": 5,
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "example": 50,
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "example": 1,
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "example": 15,
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetTemplateListresponse"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GetTemplateresponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The template's identifier.",
            "example": "057",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name given to the template.",
            "example": "Account Status",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "The template's message content.",
            "example": "Hello {FirstName}, your account balance: ${ActBal}.",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetTemplateExternalresponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GetTemplateresponse"
          },
          "appCode": {
            "type": "string",
            "description": "API response code (see table above).",
            "example": "gen.1200",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "API response message (see table above).",
            "example": "Request Successful",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ScheduleTemplateMessageRequest": {
        "required": [
          "templateId"
        ],
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "nullable": true,
            "example": "1",
            "description": "Optional if *templateName* is provisioned."
          },
          "templateName": {
            "type": "string",
            "nullable": true,
            "example": "Account Status",
            "description": "Only considered when *templateId* is not provided."
          },
          "ScheduleDateTime": {
            "type": "string",
            "example": "2023-11-11T15:00:00Z",
            "description": "**MUST BE IN UTC FORMAT. SEE EXAMPLE AT RIGHT** Date and time the message will be sent.",
            "format": "date-time"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscribers"
            },
            "nullable": true
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variables"
            },
            "nullable": true
          },
          "referenceId": {
            "type": "string",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "nullable": true
          },
          "media": {
            "type": "string",
            "nullable": true,
            "example": "data:[<mediatype>][;base64],<data> *or* https://example.com/image.png",
            "description": "Media file in base64 Data URI format *or* a fully qualified URL."
          }
        },
        "additionalProperties": false
      },
      "InteractionBroadcastTemplateMessageRequest": {
        "required": [
          "templateId",
          "messageType"
        ],
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "nullable": true,
            "example": "1",
            "description": "Optional if *templateName* is provisioned."
          },
          "templateName": {
            "type": "string",
            "nullable": true,
            "example": "Account Status",
            "description": "Only considered when *templateId* is not provided."
          },
          "messageType": {
            "$ref": "#/components/schemas/InteractionTypesNew"
          },
          "referenceId": {
            "type": "string",
            "nullable": true,
            "description": "Customer-defined identifier for the message.",
            "example": "192837"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variables"
            },
            "nullable": true
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscribers"
            },
            "nullable": true
          },
          "media": {
            "type": "string",
            "nullable": true,
            "example": "data:[<mediatype>][;base64],<data> *or* https://example.com/image.png",
            "description": "Media file in base64 Data URI format *or* a fully qualified URL."
          }
        },
        "additionalProperties": false
      },
      "CreateScheduleTemplateMessageResponseDetails": {
        "type": "object",
        "properties": {
          "ShortUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateScheduleTemplateMessageExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "items": {
              "$ref": "#/components/schemas/CreateScheduleTemplateMessageResponseDetails"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "PasswordlessLoginTokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "loginUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreVerifyTokenResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreVerifyTokenResponseGeneralResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/PreVerifyTokenResponse"
          }
        },
        "additionalProperties": false
      },
      "PreVerifyTokenResponseGeneralResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PreVerifyTokenResponseGeneralResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "UpdateAppRequest": {
        "required": [
          "role"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 200,
            "type": "string",
            "nullable": true
          },
          "role": {
            "maxLength": 100,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UpdateAppStatusRequest": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UploadImageResponse": {
        "type": "object",
        "properties": {
          "imageUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UploadImageResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UploadImageResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "MessageResponseExternalApiResponseODMPIN": {
        "type": "object",
        "properties": {
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          },
          "data": {
            "$ref": "#/components/schemas/MessageResponseODMPIN"
          }
        },
        "additionalProperties": false
      },
      "BrandVBTInboundMessages": {
        "enum": [
          "Stop",
          "Stopall",
          "Help",
          "TwoWay"
        ],
        "type": "string"
      },
      "BrandVBTOutboundMessages": {
        "enum": [
          "OptInResponse",
          "StopResponse",
          "HelpResponse",
          "StopAllResponse",
          "Vbt"
        ],
        "type": "string"
      },
      "BrandVbtMessageReportResponse": {
        "type": "object",
        "properties": {
          "subscriber": {
            "$ref": "#/components/schemas/SubscriberResponseInbox"
          },
          "messageId": {
            "type": "string",
            "description": "Tracking ID number of the message.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "nullable": true
          },
          "deliveryStatus": {
            "type": "string",
            "description": "Message status when the API was called.",
            "example": "Delivered",
            "nullable": true
          },
          "deliveryStatusCode": {
            "type": "string",
            "description": "Message status code when the API was called.",
            "example": "100",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Message content.",
            "example": "Hello! Your account is currently at $426. Contact us for more...",
            "nullable": true
          },
          "templateId": {
            "type": "string",
            "example": "1",
            "description": "Optional if *templateName* is provisioned.",
            "nullable": true
          },
          "direction": {
            "description": "Message direction.",
            "example": "Outbound",
            "$ref": "#/components/schemas/MessageType"
          },
          "referenceId": {
            "type": "string",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "nullable": true
          },
          "communicationCode": {
            "type": "string",
            "description": "Short Code or 10DLC used to send the message.",
            "example": "54321",
            "nullable": true
          },
          "sentAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time the message was sent from SBT.",
            "example": "2024-04-22T016:50:00.00Z",
            "nullable": true
          },
          "deliveredAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time the message was received by the handset.",
            "example": "2024-04-22T016:51:25.00Z",
            "nullable": true
          },
          "receivedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time the message was received by the handset.",
            "example": "2024-04-22T016:51:25.00Z",
            "nullable": true
          },
          "readAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time the message was read by the subscriber.",
            "example": "2024-04-22T016:53:31.22Z",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/UserDetails"
          },
          "sentTimeLocal": {
            "type": "string",
            "format": "date-time",
            "description": "Local time the message was sent from SBT (with *timeZoneOffset*).",
            "example": "2024-04-22T011:50:00.00Z",
            "nullable": true
          },
          "deliveredTimeLocal": {
            "type": "string",
            "format": "date-time",
            "description": "Local time the message was delivered by the carrier (with *timeZoneOffset*).",
            "example": "2024-04-22T011:51:15.00Z",
            "nullable": true
          },
          "receivedTimeLocal": {
            "type": "string",
            "format": "date-time",
            "description": "Local time the message was received by the handset (with *timeZoneOffset*).",
            "example": "2024-04-22T011:51:25.00Z",
            "nullable": true
          },
          "readTimeLocal": {
            "type": "string",
            "format": "date-time",
            "description": "Local time the message was read by the subscriber (with *timeZoneOffset*).",
            "example": "2024-04-22T011:53:31.22Z",
            "nullable": true
          },
          "mediaDetails": {
            "$ref": "#/components/schemas/MediaDetails"
          },
          "totalMessageSegments": {
            "type": "integer",
            "description": "Number of message segments used by the message.",
            "example": 2,
            "format": "int32"
          },
          "messageCategory": {
            "type": "string",
            "description": "Type of message sent.",
            "example": "Unicast",
            "nullable": true
          },
          "modeOfCommunication": {
            "type": "string",
            "description": "Message type (SMS, MMS, or RCS).",
            "example": "SMS",
            "nullable": true
          },
          "subscriberCustomParams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberCustomParams"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrandVbtMessageReportResponsePaginatedResponse2": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandVbtMessageReportResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BrandVbtMessageReportResponsePaginatedResponse2ExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/BrandVbtMessageReportResponsePaginatedResponse2"
          },
          "appCode": {
            "type": "string",
            "example": "gen.1200",
            "description": "API response code (see table above).",
            "nullable": true
          },
          "message": {
            "type": "string",
            "example": "Request successful",
            "description": "API response message (see table above).",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "description": "If no error, *false*. If error, *true*.",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ConfirmVbtWithPinByBrandRequest": {
        "required": [
          "pin"
        ],
        "type": "object",
        "properties": {
          "pin": {
            "minLength": 1,
            "type": "string",
            "example": "210622",
            "description": "PIN sent to the subscriber."
          }
        },
        "additionalProperties": false
      },
      "ConfirmVbtMessageRequest": {
        "type": "object",
        "required": [
          "pin"
        ],
        "properties": {
          "pin": {
            "type": "string",
            "nullable": true,
            "example": "210622",
            "description": "PIN sent to the subscriber."
          }
        },
        "additionalProperties": false
      },
      "VbtTypes": {
        "enum": [
          "Optin",
          "Pin",
          "ReservedWord",
          "SilentOptin"
        ],
        "type": "string"
      },
      "Verification": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/VbtTypes"
          },
          "force": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ODMPINresponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ODMPINresponseData"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ODMPINresponseData": {
        "type": "object",
        "properties": {
          "pin": {
            "type": "string",
            "nullable": true,
            "description": "PIN sent to the subscriber.",
            "example": "210622"
          },
          "additionalProperties": false
        }
      },
      "RegisterUser": {
        "required": [
          "email",
          "password",
          "phone"
        ],
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "format": "tel"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "maxLength": 15,
            "minLength": 8,
            "pattern": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).*$",
            "type": "string",
            "format": "password"
          },
          "imageURL": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          },
          "hidden": {
            "type": "boolean"
          },
          "addedBy": {
            "type": "string",
            "nullable": true
          },
          "addedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "campuses": {
            "$ref": "#/components/schemas/Campuses"
          },
          "preferences": {
            "$ref": "#/components/schemas/Preferences"
          }
        },
        "additionalProperties": false
      },
      "UserAssociateRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserBasicDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserChangePasswordRequest": {
        "required": [
          "newPassword",
          "oldPassword"
        ],
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string",
            "format": "password"
          },
          "newPassword": {
            "maxLength": 15,
            "minLength": 8,
            "pattern": "^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).*$",
            "type": "string",
            "format": "password"
          }
        },
        "additionalProperties": false
      },
      "UserChangeRoleResponse": {
        "type": "object",
        "properties": {
          "invalidUserIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "roleAddFailedUserIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "roleRemoveFailedUserIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserChangeRoleResponseGeneralResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "isError": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "data": {
            "$ref": "#/components/schemas/UserChangeRoleResponse"
          }
        },
        "additionalProperties": false
      },
      "UserChangeRoleResponseGeneralResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserChangeRoleResponseGeneralResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "UserDeAssociateRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDetails": {
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Internal ID number of the sending user.",
            "example": "08e2ad9b-b5b6-46d1-b12e-b568a64b4419",
            "nullable": true
          },
          "email": {
            "type": "string",
            "example": "cburke@weyland-yutani.com",
            "description": "Email address of the sending user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDetailsNew": {
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string",
            "example": "Doe",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "example": "John",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "description": "Internal ID number of the sending user.",
            "example": "08e2ad9b-b5b6-46d1-b12e-b568a64b4419",
            "nullable": true
          },
          "email": {
            "type": "string",
            "example": "cburke@weyland-yutani.com",
            "description": "Email address of the sending user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserListExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "emailVerified": {
            "type": "boolean"
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "phoneVerified": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "lastActiveOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "preferences": {
            "$ref": "#/components/schemas/Preferences"
          },
          "campusDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgUnitModelBasicDetails"
            },
            "nullable": true
          },
          "roleDetail": {
            "$ref": "#/components/schemas/RoleModel"
          }
        },
        "additionalProperties": false
      },
      "UserModelExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserModel"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "UserModelListPaginatedResponse": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "filterCount": {
            "type": "integer",
            "format": "int64"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserModelListPaginatedResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserModelListPaginatedResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "UserOutboundResponse": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "Internal ID number of the sending user.",
            "example": "08e2ad9b-b5b6-46d1-b12e-b568a64b4419",
            "nullable": true
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserOutboundResponseIEnumerableExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserOutboundResponse"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "UserPlatformContext": {
        "type": "object",
        "properties": {
          "componentName": {
            "type": "string",
            "nullable": true
          },
          "additionalMeta": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "hierarchy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRoleChangeRequestModel": {
        "type": "object",
        "properties": {
          "userRole": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "shortName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DownloadMMSExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "nullable": true,
            "description": "Filestream"
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "InboundMMSRequestPayload": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "nullable": false,
            "description": "InboundMMS"
          },
          "Payload": {
            "$ref": "#/components/schemas/InboundMMSPayload"
          }
        },
        "additionalProperties": false
      },
      "InboundMMSPayload": {
        "type": "object",
        "properties": {
          "AccountId": {
            "type": "string",
            "description": "SBT client account ID.",
            "example": "271759e9-ca4f-4835-be61-0fe38d051559",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "description": "Message content.",
            "example": "My completed application form is attached",
            "nullable": true
          },
          "OriginalMessage": {
            "type": "string",
            "nullable": true
          },
          "Msisdn": {
            "type": "string",
            "description": "Mobile number with dialing code. Eleven digits with no plus sign (12345678902).",
            "example": "12345678902",
            "nullable": true
          },
          "GroupName": {
            "type": "string",
            "description": "Name of the messaging group of which the subscriber is a member.",
            "example": "Account Updates",
            "nullable": true
          },
          "GroupId": {
            "type": "string",
            "description": "The identifier of the group of which the subscriber is a member.",
            "example": "f0618891-6561-43fb-ae67-c84f5448cea7",
            "nullable": true
          },
          "CommunicationCode": {
            "type": "string",
            "description": "Short Code or 10DLC used to send the message.",
            "example": "54321",
            "nullable": true
          },
          "MessageType": {
            "type": "string",
            "description": "Type of message sent.",
            "enum": [
              "Stop",
              "Stopall",
              "Help",
              "Keyword",
              "TwoWay"
            ],
            "example": "TwoWay",
            "nullable": true
          },
          "ReceivedTime": {
            "type": "string",
            "description": "Time the inbound message was received.",
            "example": "2023-11-11T15:21:35Z",
            "format": "date-time"
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertiesNew"
            },
            "nullable": true
          },
          "ReferenceId": {
            "type": "string",
            "description": "Customer-defined identifier for the message.",
            "example": "192837",
            "nullable": true
          },
          "MessageId": {
            "type": "string",
            "description": "Message tracking ID number from SBT.",
            "example": "44463f49-ad32-460d-956c-83849fc639a5",
            "nullable": true
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MediaFile"
            },
            "nullable": true
          },
          "TotalMessageSegments": {
            "type": "integer",
            "description": "Number of message segments used by the message.",
            "example": 2,
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OtpResponse": {
        "type": "object",
        "properties": {
          "isOtpSent": {
            "type": "boolean"
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OtpResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/OtpResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "MethodofpaymentDetails": {
        "type": "object",
        "properties": {
          "paymentType": {
            "type": "string",
            "nullable": true
          },
          "paymentDetails": {
            "type": "string",
            "nullable": true
          },
          "paymentExpiry": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentDetail": {
        "type": "object",
        "properties": {
          "planName": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "entitlement_capacity": {
            "type": "string",
            "nullable": true
          },
          "entitlement_overageCost": {
            "type": "string",
            "nullable": true
          },
          "entitlement_short_code_type": {
            "type": "string",
            "nullable": true
          },
          "entitlement_long_code_type": {
            "type": "string",
            "nullable": true
          },
          "finalAmount": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "price": {
            "type": "string",
            "nullable": true
          },
          "discount": {
            "type": "string",
            "nullable": true
          },
          "paymentdatatime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "messageCode": {
            "type": "string",
            "nullable": true
          },
          "messageText": {
            "type": "string",
            "nullable": true
          },
          "externalReferenceId": {
            "type": "string",
            "nullable": true
          },
          "accountNumber": {
            "type": "integer",
            "format": "int64"
          },
          "billingToken": {
            "type": "string",
            "nullable": true
          },
          "paymentDate": {
            "type": "string",
            "nullable": true
          },
          "paymentAmount": {
            "type": "string",
            "nullable": true
          },
          "confirmationNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentResponseExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PaymentResponse"
          },
          "appCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentRetryTransaction": {
        "type": "object",
        "properties": {
          "invoiceId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RoleModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "hasAccessToAllCampuses": {
            "type": "boolean"
          },
          "hasAccessToAllGroups": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RoleModelIEnumerableExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleModel"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "CreateShorturlsResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateShorturlsResponseExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CreateShorturlsResponse"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "GetShortUrlDetailsResult": {
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "nullable": true
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "response": {
            "$ref": "#/components/schemas/ResponseShortUrlDetails"
          }
        },
        "additionalProperties": false
      },
      "ShorturlsUpdateRequest": {
        "required": [
          "longUrl"
        ],
        "type": "object",
        "properties": {
          "longUrl": {
            "type": "string",
            "description": "The new long URL.",
            "example": "https://example.com/directory/subdirectory/page.htm",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShorturlRequest": {
        "required": [
          "longUrl"
        ],
        "type": "object",
        "properties": {
          "longUrl": {
            "description": "The original long URL.",
            "example": "https://example.com/directory/subdirectory/page.htm",
            "nullable": true
          },
          "UrlSuffix": {
            "type": "string",
            "nullable": true
          },
          "domain": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResponseShortUrlDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "dateLog": {
            "type": "string",
            "nullable": true
          },
          "client_id": {
            "type": "string",
            "nullable": true
          },
          "urlString": {
            "type": "string",
            "nullable": true
          },
          "originalLink": {
            "type": "string",
            "nullable": true
          },
          "isCustomUrl": {
            "type": "string",
            "nullable": true
          },
          "totalClicks": {
            "type": "integer",
            "format": "int32"
          },
          "interim_clicks": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UpdateLongURLbyShortURLResponseDetails": {
        "type": "object",
        "properties": {
          "LongUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateLongURLbyShortURLExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "items": {
              "$ref": "#/components/schemas/UpdateLongURLbyShortURLResponseDetails"
            },
            "nullable": true
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "Shorturlrules": {
        "type": "object",
        "properties": {
          "externalReferenceId": {
            "type": "string",
            "nullable": true
          },
          "parentOrgUnitId": {
            "type": "string",
            "nullable": true
          },
          "shortenEnabled": {
            "type": "boolean"
          },
          "urlLength": {
            "type": "integer",
            "format": "int32"
          },
          "urllist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShorturlrulesExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Shorturlrules"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ShorturlrulesResponse": {
        "type": "object",
        "properties": {
          "shortenEnabled": {
            "type": "boolean"
          },
          "urlLength": {
            "type": "integer",
            "format": "int32",
            "default": 15
          },
          "urllist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Shorturls": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectId"
          },
          "externalReferenceId": {
            "type": "string",
            "nullable": true
          },
          "orgunitId": {
            "type": "string",
            "nullable": true
          },
          "longurl": {
            "type": "string",
            "nullable": true
          },
          "shorturl": {
            "type": "string",
            "nullable": true
          },
          "appId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShorturlsPaginatedResponse2": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shorturls"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ShorturlsPaginatedResponse2ExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ShorturlsPaginatedResponse2"
          },
          "appCode": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ShorturlsRequest": {
        "type": "object",
        "properties": {
          "longUrls": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SmartClickShortUrlReport": {
        "type": "object",
        "properties": {
          "getShortUrlDetailsResult": {
            "$ref": "#/components/schemas/GetShortUrlDetailsResult"
          }
        },
        "additionalProperties": false
      },
      "SmartClickShortUrlReportExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SmartClickShortUrlReport"
          },
          "appCode": {
            "type": "string",
            "example": "gen.1200",
            "description": "API response code (see table above).",
            "nullable": true
          },
          "message": {
            "type": "string",
            "example": "Request successful",
            "description": "API response message (see table above).",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "description": "If no error, *false*. If error, *true*.",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ShorturlReport": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total number of items in the query return.",
            "example": 207,
            "nullable": false
          },
          "totalPages": {
            "type": "integer",
            "description": "Number of pages in the query return.",
            "example": 14,
            "nullable": false
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShorturlReportData"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ShorturlReportData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The SmartURL's identifier in the SBT system.",
            "nullable": true
          },
          "longurl": {
            "type": "string",
            "example": "https://example.com/directory/subdirectory/page.htm",
            "description": "The SmartURL's associated long URL.",
            "nullable": true
          },
          "shorturl": {
            "type": "string",
            "description": "The SmartURL itself.",
            "example": "https://s.s-url.pro/bDHpov",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "description": "Date the SmartURL was created.",
            "example": "2023-08-05T05:03:40.23Z",
            "nullable": true
          },
          "UpdatedOn": {
            "type": "string",
            "description": "Date the SmartURL was updated (if available).",
            "example": "2024-04-05T07:37:51.20Z",
            "nullable": true
          },
          "clickCount": {
            "type": "string",
            "description": "Number of times the SmartURL has been clicked by subscribers.",
            "example": "11",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShorturlReportExternalApiResponseNew": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ShorturlReport"
          },
          "appCode": {
            "type": "string",
            "nullable": true,
            "example": "gen.1200",
            "description": "API response code (see table above)."
          },
          "message": {
            "type": "string",
            "nullable": true,
            "example": "Request successful",
            "description": "API response message (see table above)."
          },
          "isError": {
            "type": "boolean",
            "default": false,
            "description": "If no error, *false*. If error, *true*."
          }
        },
        "additionalProperties": false
      },
      "ShortUrlReportResponse": {
        "type": "object",
        "properties": {
          "clickedDateTimeLocal": {
            "type": "string",
            "description": "Local time the subscriber clicked the SmartURL.",
            "example": "2024-05-16T11:12:41.18Z",
            "format": "date-time"
          },
          "clickedDateTime": {
            "type": "string",
            "description": "UTC time the subscriber clicked the SmartURL.",
            "example": "2024-05-16T16:12:41.18Z",
            "format": "date-time"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time",
            "description": "Date the SmartURL was created, in UTC.",
            "example": "2023-08-05T016:03:40.23Z",
            "nullable": true
          },
          "createdOnLocal": {
            "type": "string",
            "description": "Date the SmartURL was created, with the *TimeZoneOffset* included.",
            "example": "2023-08-05T11:03:40.23Z",
            "format": "date-time",
            "nullable": true
          },
          "longUrl": {
            "type": "string",
            "description": "The original long URL.",
            "example": "https://example.com/directory/subdirectory/page.htm",
            "nullable": true
          },
          "shortUrl": {
            "type": "string",
            "description": "The SmartURL itself.",
            "example": "https://s.s-url.pro/bDHpov",
            "nullable": true
          },
          "isCustomSuffix": {
            "description": "Yes/No if the SmartURL has a custom suffix.",
            "example": "true *or* false",
            "type": "boolean"
          },
          "ip": {
            "type": "string",
            "description": "IP address of the visiting device.",
            "example": "192.168.1.66",
            "nullable": true
          },
          "os": {
            "type": "string",
            "description": "Operating system of the visiting device.",
            "example": "iOS",
            "nullable": true
          },
          "deviceInfo": {
            "type": "string",
            "description": "Basic info for the visiting device.",
            "example": "iPhone SE",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShortUrlReportResponsePaginatedResponse2": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortUrlReportResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ShortUrlReportResponsePaginatedResponse2ExternalApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ShortUrlReportResponsePaginatedResponse2"
          },
          "appCode": {
            "type": "string",
            "example": "gen.1200",
            "description": "API response code (see table above).",
            "nullable": true
          },
          "message": {
            "type": "string",
            "example": "Request successful",
            "description": "API response message (see table above).",
            "nullable": true
          },
          "isError": {
            "type": "boolean",
            "description": "If no error, *false*. If error, *true*.",
            "default": false
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "oauth": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://login-stage.solutionsbytext.com/connect/token"
          }
        }
      },
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "description": "JWT Authorization header using the Bearer scheme.  'Bearer {token}' - token generated from token url with clientId, secret received separately."
      }
    }
  }
}